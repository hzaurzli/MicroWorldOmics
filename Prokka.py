# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Prokka.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys,os
import time
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import paramiko
import requests
from Bio import SeqIO
from stat import S_ISDIR as isdir



class WorkThread(QThread):
    # 自定义信号对象
    trigger = pyqtSignal(str)

    def __int__(self):
        # 初始化函数
        super(WorkThread, self).__init__()

    def run(self):
        def upfile(source_file, target_folder):
            # 设置SSH连接参数
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(hostname='113.57.10.23', username='root',
                        password='aoligei@ay', port=63389)

            # 使用SFTP传输文件
            sftp = ssh.open_sftp()
            sftp.put(source_file, target_folder)  # 目标文件名可以按需更改
            sftp.close()

            # 关闭SSH连接
            ssh.close()

        def check_file(file):
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(hostname='113.57.10.23', username='root',
                        password='aoligei@ay', port=63389)

            commend = "ls -f /home/prokka/result/" + file
            _, stdout, _ = ssh.exec_command(commend)

            if stdout.readline() != '':
                print(stdout.readline())
                ssh.close()
                return "exist"
            else:
                ssh.close()
                return "not exist"

        def down_from_remote(sftp_obj, remote_dir_name, local_dir_name):
            """远程下载文件"""
            remote_file = sftp_obj.stat(remote_dir_name)
            if isdir(remote_file.st_mode):
                # 文件夹，不能直接下载，需要继续循环
                check_local_dir(local_dir_name)
                print('开始下载文件夹：' + remote_dir_name)
                for remote_file_name in sftp.listdir(remote_dir_name):
                    sub_remote = os.path.join(remote_dir_name, remote_file_name)
                    sub_remote = sub_remote.replace('\\', '/')
                    sub_local = os.path.join(local_dir_name, remote_file_name)
                    sub_local = sub_local.replace('\\', '/')
                    down_from_remote(sftp_obj, sub_remote, sub_local)
            else:
                # 文件，直接下载
                print('开始下载文件：' + remote_dir_name)
                sftp.get(remote_dir_name, local_dir_name)

        def check_local_dir(local_dir_name):
            """本地文件夹是否存在，不存在则创建"""
            if not os.path.exists(local_dir_name):
                os.makedirs(local_dir_name)

        try:
            upfile(fasta,'/home/prokka/data/' + os.path.basename(fasta))

            url = 'http://113.57.10.23:3999/prokka'
            data = "/" + str(os.path.basename(fasta)) + "&&" + str(os.path.split(out)[-1]) + "&&" + prefix + "&&" + kingdom
            url_data = url + data
            print(url_data)
            response = requests.post(url=url_data)
            print(response.text)

            file = str(os.path.split(out)[-1]) + "/" + str(prefix) + ".gff"
            print(file)
            while True:
                if check_file(file) == "exist":
                    print("exist")
                    break
                else:
                    time.sleep(10)
                    continue

            time.sleep(3)

            host_name = '113.57.10.23'
            user_name = 'root'
            password = 'aoligei@ay'
            port = 63389
            # 远程文件路径（需要绝对路径）
            remote_dir = '/home/prokka/result/' + str(os.path.split(out)[-1]) + '/'
            # 本地文件存放路径（绝对路径或者相对路径都可以）
            local_dir = out

            # 连接远程服务器
            t = paramiko.Transport((host_name, port))
            t.connect(username=user_name, password=password)
            sftp = paramiko.SFTPClient.from_transport(t)
            # 远程文件开始下载
            down_from_remote(sftp, remote_dir, local_dir)
            # 关闭连接
            t.close()

            self.trigger.emit('Finished!!!')

        except:
            QMessageBox.critical(self, "error", "Please check your network connection!!!")


class Prokka_Form(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.work = WorkThread()

    def setupUi(self, Clustal):
        Clustal.setObjectName("Clustal")
        Clustal.resize(702, 467)
        Clustal.setStyleSheet("background-image: url(./logo/backgroundpage.png)")
        self.label = QtWidgets.QLabel(Clustal)
        self.label.setGeometry(QtCore.QRect(290, 20, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Clustal)
        self.label_2.setGeometry(QtCore.QRect(60, 70, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_2.setGeometry(QtCore.QRect(60, 110, 191, 31))
        self.textBrowser_2.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_3 = QtWidgets.QLabel(Clustal)
        self.label_3.setGeometry(QtCore.QRect(60, 180, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.textBrowser_3 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_3.setGeometry(QtCore.QRect(60, 220, 191, 31))
        self.textBrowser_3.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.pushButton_2 = QtWidgets.QPushButton(Clustal)
        self.pushButton_2.setGeometry(QtCore.QRect(280, 110, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Clustal)
        self.pushButton_3.setGeometry(QtCore.QRect(280, 220, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.textBrowser = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser.setGeometry(QtCore.QRect(60, 330, 241, 111))
        self.textBrowser.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser.setObjectName("textBrowser")
        self.label_4 = QtWidgets.QLabel(Clustal)
        self.label_4.setGeometry(QtCore.QRect(100, 290, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(Clustal)
        self.pushButton.setGeometry(QtCore.QRect(530, 390, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-image: url(./logo/white.png)")
        self.pushButton.setObjectName("pushButton")
        self.textEdit = QtWidgets.QTextEdit(Clustal)
        self.textEdit.setGeometry(QtCore.QRect(450, 110, 211, 31))
        self.textEdit.setStyleSheet("background-image: url(./logo/white.png)")
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(Clustal)
        self.textEdit_2.setGeometry(QtCore.QRect(450, 220, 211, 31))
        self.textEdit_2.setStyleSheet("background-image: url(./logo/white.png)")
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_5 = QtWidgets.QLabel(Clustal)
        self.label_5.setGeometry(QtCore.QRect(450, 70, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(Clustal)
        self.label_6.setGeometry(QtCore.QRect(450, 180, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")

        self.retranslateUi(Clustal)
        QtCore.QMetaObject.connectSlotsByName(Clustal)


        # button action
        self.pushButton.clicked.connect(self.calculation)
        self.pushButton_2.clicked.connect(self.read_file1)
        self.pushButton_3.clicked.connect(self.read_file2)

        self.textEdit.setPlaceholderText(" example")
        self.textEdit_2.setPlaceholderText(" Bacteria")


    def retranslateUi(self, Clustal):
        _translate = QtCore.QCoreApplication.translate
        Clustal.setWindowTitle(_translate("Clustal", "Prokka"))
        self.label.setText(_translate("Clustal", "Prokka"))
        self.label_2.setText(_translate("Clustal", "Input fasta file"))
        self.label_3.setText(_translate("Clustal", "Output fasta folder"))
        self.pushButton_2.setText(_translate("Clustal", "Choose"))
        self.pushButton_3.setText(_translate("Clustal", "Choose"))
        self.label_4.setText(_translate("Clustal", "Status"))
        self.pushButton.setText(_translate("Clustal", "Run"))
        self.label_5.setText(_translate("Clustal", "Prefix"))
        self.label_6.setText(_translate("Clustal", "Kingdom"))

    def read_file1(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_2.setText(openfile_name)

    def read_file2(self):
        openfile_name = QtWidgets.QFileDialog.getExistingDirectory(self, "choose file", "./")
        print(openfile_name)
        self.textBrowser_3.setText(openfile_name)

    def finished(self, str):
        self.textBrowser.setText(str)

    def calculation(self):
        def is_fasta(filename):
            with open(filename, "r") as handle:
                fasta = SeqIO.parse(handle, "fasta")
                return any(fasta)  # False when `fasta` is empty, i.e. wasn't a FASTA file

        global fasta, out, path, prefix, kingdom
        fasta = self.textBrowser_2.toPlainText()
        out = self.textBrowser_3.toPlainText()
        path = os.path.dirname(out)

        try:
            if any([len(fasta), len(out)]) == False:
                QMessageBox.warning(self, "warning", "Please add correct file path!", QMessageBox.Cancel)
            else:
                if is_fasta(fasta) == False:
                    QMessageBox.critical(self, "error", "Check fasta file format!")
                else:
                    self.textBrowser.setText('Running! please wait')
                    QApplication.processEvents()  # 逐条打印状态

                    try:
                        prefix = str(self.textEdit.toPlainText())
                        if prefix == '':
                            prefix = "example"
                        else:
                            prefix = prefix
                    except:
                        prefix = "example"

                    try:
                        kingdom = str(self.textEdit_2.toPlainText())
                        if kingdom == '':
                            kingdom = "Bacteria"
                        else:
                            kingdom = kingdom
                    except:
                        kingdom = "Bacteria"

                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

        except:
            QMessageBox.critical(self, "error", "Please check all your files format!!!")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Clustal = QtWidgets.QWidget()
    ui = Prokka_Form()
    ui.setupUi(Clustal)
    Clustal.show()
    sys.exit(app.exec_())

