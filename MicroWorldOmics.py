# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MicroWorldOmics.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import time, os
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import GeneIdentification
from BlastN import BlastN_Form
from BlastP import BlastP_Form
from BlastX import BlastX_Form
from tBlastN import tBlastN_Form
from tBlastX import tBlastX_Form
from Clustal import Clustal_Form
from Muscle import Muscle_Form
from Mafft import Mafft_Form
import JSalignment
import Treevis
from Dots_counting import Dots_counting_Form, Dialog
from Dots_counting_V2 import Dots_counting_V2_Form, Dialog
from IQtree import IQtree_Form
from Fasttree import Fasttree_Form
from Raxml import Raxml_Form
from PCR import PCR_Form
from Prodigal import Prodigal_Form
from GCview import GCview_Form
from Clinker import Clinker_Form
from ProtVista import Protvista_Form, winTest
import Blasterjs
import VipTree
import VIRIDIC
from Phylotreejs import Phylotreejs_Form
from MLST import MLST_Form
from Serotype import Serotype_Form
from GeneIdentification import GeneIdentification_Form
from CoreGenomeAnalysis import Core_genome_Form
from ShinyProtparam import ShinyProtparam_Form
from ShinyPCoA import ShinyPCoA_Form
from ShinyBatch import ShinyBatch_Form
from Bugbase import Bugbase_Form
from ShinyMCA import ShinyMCA_Form
from ShinyBAE import ShinyBAE_Form
from Chemical_formula import Chemicalformula_Form
from FastANI import FastANI_Form
from ShinyGenomePCA import ShinyGenomePCA_Form
from ShinyMap import ShinyMap_Form
from ShinyNMDS import ShinyNMDS_Form
from ShinyDiff import ShinyDiff_Form
from Shiny3Dprotein import Shiny3Dprotein_Form
from ShinyTMscoreAlign import ShinyTMscoreAlign_Form
from ShinyVolc import ShinyVolc_Form
from ARAGORN import ARAGORN_Form
from CDhit import CDhit_Form
from GBK2JSON import GBK2JSON_Form


class MyWindow(QtWidgets.QPushButton):
    def __init__(self):
        QtWidgets.QPushButton.__init__(self)

    def load_data(self, sp, num):
        time.sleep(2)  # 加载数据
        sp.showMessage("Loading... {0}%".format(num * 10), QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom,
                       QtCore.Qt.black)
        QtWidgets.qApp.processEvents()  # 允许主进程处理事件


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(850, 488)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("background-image: url(./logo/background.png)")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 221, 421))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.scrollArea = QtWidgets.QScrollArea(self.verticalLayoutWidget)
        self.scrollArea.setWidgetResizable(False)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, -302, 198, 719))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.comboBox = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox.setEnabled(True)
        self.comboBox.setGeometry(QtCore.QRect(0, 20, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label.setGeometry(QtCore.QRect(0, 0, 147, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_2.setGeometry(QtCore.QRect(0, 50, 68, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.comboBox_2 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_2.setEnabled(True)
        self.comboBox_2.setGeometry(QtCore.QRect(0, 70, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_2.sizePolicy().hasHeightForWidth())
        self.comboBox_2.setSizePolicy(sizePolicy)
        self.comboBox_2.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}\n"
" ")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_3 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_3.setGeometry(QtCore.QRect(0, 120, 147, 18))
        self.comboBox_3.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}\n"
"")
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.label_3 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_3.setGeometry(QtCore.QRect(0, 100, 147, 15))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.comboBox_4 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_4.setEnabled(True)
        self.comboBox_4.setGeometry(QtCore.QRect(0, 170, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_4.sizePolicy().hasHeightForWidth())
        self.comboBox_4.setSizePolicy(sizePolicy)
        self.comboBox_4.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}\n"
"")
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.label_4 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_4.setGeometry(QtCore.QRect(0, 150, 147, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.comboBox_5 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_5.setEnabled(True)
        self.comboBox_5.setGeometry(QtCore.QRect(0, 220, 151, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_5.sizePolicy().hasHeightForWidth())
        self.comboBox_5.setSizePolicy(sizePolicy)
        self.comboBox_5.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}\n"
"")
        self.comboBox_5.setObjectName("comboBox_5")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.label_5 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_5.setGeometry(QtCore.QRect(0, 200, 147, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.comboBox_6 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_6.setEnabled(True)
        self.comboBox_6.setGeometry(QtCore.QRect(0, 280, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_6.sizePolicy().hasHeightForWidth())
        self.comboBox_6.setSizePolicy(sizePolicy)
        self.comboBox_6.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}")
        self.comboBox_6.setObjectName("comboBox_6")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.label_6 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_6.setGeometry(QtCore.QRect(0, 260, 147, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.comboBox_8 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_8.setEnabled(True)
        self.comboBox_8.setGeometry(QtCore.QRect(0, 380, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_8.sizePolicy().hasHeightForWidth())
        self.comboBox_8.setSizePolicy(sizePolicy)
        self.comboBox_8.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}")
        self.comboBox_8.setObjectName("comboBox_8")
        self.comboBox_8.addItem("")
        self.comboBox_8.addItem("")
        self.comboBox_8.addItem("")
        self.comboBox_8.addItem("")
        self.comboBox_8.addItem("")
        self.comboBox_8.addItem("")
        self.comboBox_8.addItem("")
        self.label_8 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_8.setGeometry(QtCore.QRect(0, 360, 147, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.comboBox_9 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_9.setEnabled(True)
        self.comboBox_9.setGeometry(QtCore.QRect(0, 430, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_9.sizePolicy().hasHeightForWidth())
        self.comboBox_9.setSizePolicy(sizePolicy)
        self.comboBox_9.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}")
        self.comboBox_9.setObjectName("comboBox_9")
        self.comboBox_9.addItem("")
        self.comboBox_9.addItem("")
        self.comboBox_9.addItem("")
        self.label_9 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_9.setGeometry(QtCore.QRect(0, 410, 147, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.comboBox_10 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_10.setEnabled(True)
        self.comboBox_10.setGeometry(QtCore.QRect(0, 480, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_10.sizePolicy().hasHeightForWidth())
        self.comboBox_10.setSizePolicy(sizePolicy)
        self.comboBox_10.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}\n"
"")
        self.comboBox_10.setObjectName("comboBox_10")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.comboBox_10.addItem("")
        self.label_10 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_10.setGeometry(QtCore.QRect(0, 460, 147, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_11.setGeometry(QtCore.QRect(0, 510, 171, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.comboBox_11 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_11.setEnabled(True)
        self.comboBox_11.setGeometry(QtCore.QRect(0, 530, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_11.sizePolicy().hasHeightForWidth())
        self.comboBox_11.setSizePolicy(sizePolicy)
        self.comboBox_11.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}")
        self.comboBox_11.setObjectName("comboBox_11")
        self.comboBox_11.addItem("")
        self.comboBox_11.addItem("")
        self.comboBox_11.addItem("")
        self.comboBox_11.addItem("")
        self.comboBox_11.addItem("")
        self.label_12 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_12.setGeometry(QtCore.QRect(0, 560, 141, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.comboBox_12 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_12.setEnabled(True)
        self.comboBox_12.setGeometry(QtCore.QRect(0, 580, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_12.sizePolicy().hasHeightForWidth())
        self.comboBox_12.setSizePolicy(sizePolicy)
        self.comboBox_12.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}")
        self.comboBox_12.setObjectName("comboBox_12")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_12.addItem("")
        self.comboBox_7 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_7.setEnabled(True)
        self.comboBox_7.setGeometry(QtCore.QRect(0, 330, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_7.sizePolicy().hasHeightForWidth())
        self.comboBox_7.setSizePolicy(sizePolicy)
        self.comboBox_7.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}")
        self.comboBox_7.setObjectName("comboBox_7")
        self.comboBox_7.addItem("")
        self.comboBox_7.addItem("")
        self.label_7 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_7.setGeometry(QtCore.QRect(0, 310, 147, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_15 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_15.setGeometry(QtCore.QRect(0, 610, 181, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_15.sizePolicy().hasHeightForWidth())
        self.label_15.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.comboBox_13 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_13.setEnabled(True)
        self.comboBox_13.setGeometry(QtCore.QRect(0, 630, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_13.sizePolicy().hasHeightForWidth())
        self.comboBox_13.setSizePolicy(sizePolicy)
        self.comboBox_13.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}")
        self.comboBox_13.setObjectName("comboBox_13")
        self.comboBox_13.addItem("")
        self.comboBox_13.addItem("")
        self.comboBox_13.addItem("")
        self.comboBox_13.addItem("")
        self.comboBox_13.addItem("")
        self.comboBox_13.addItem("")
        self.comboBox_13.addItem("")
        self.comboBox_13.addItem("")
        self.comboBox_13.addItem("")
        self.comboBox_13.addItem("")
        self.label_16 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_16.setGeometry(QtCore.QRect(0, 660, 141, 17))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_16.sizePolicy().hasHeightForWidth())
        self.label_16.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.comboBox_14 = QtWidgets.QComboBox(self.scrollAreaWidgetContents)
        self.comboBox_14.setEnabled(True)
        self.comboBox_14.setGeometry(QtCore.QRect(0, 680, 147, 18))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_14.sizePolicy().hasHeightForWidth())
        self.comboBox_14.setSizePolicy(sizePolicy)
        self.comboBox_14.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:rgb(123,123,123);/*字体颜色*/\n"
"    background-color: transparent;\n"
"}")
        self.comboBox_14.setObjectName("comboBox_14")
        self.comboBox_14.addItem("")
        self.comboBox_14.addItem("")
        self.comboBox_14.addItem("")
        self.comboBox_14.addItem("")
        self.comboBox_14.addItem("")
        self.comboBox_14.addItem("")
        self.comboBox_14.addItem("")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.scrollArea)
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(620, 40, 61, 61))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)
        self.label_13.setText("")
        self.label_13.setPixmap(QtGui.QPixmap("./logo/lrz.png"))
        self.label_13.setScaledContents(True)
        self.label_13.setObjectName("label_13")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(590, 10, 251, 231))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.textBrowser.setFont(font)
        self.textBrowser.setAutoFillBackground(False)
        self.textBrowser.setStyleSheet("background-image: url(./logo/color1.png);\n"
"background-color: rgb(85, 255, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.textBrowser.setObjectName("textBrowser")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(710, 40, 101, 61))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("background-image: url(./logo/color1.png);")
        self.label_14.setObjectName("label_14")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(590, 260, 251, 171))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.textBrowser_2.setFont(font)
        self.textBrowser_2.setAutoFillBackground(False)
        self.textBrowser_2.setStyleSheet("background-image: url(./logo/color1.png);\n"
"background-color: rgb(85, 255, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.verticalLayoutWidget.raise_()
        self.textBrowser.raise_()
        self.label_13.raise_()
        self.label_14.raise_()
        self.textBrowser_2.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 850, 23))
        self.menubar.setObjectName("menubar")
        self.menuBlast = QtWidgets.QMenu(self.menubar)
        self.menuBlast.setObjectName("menuBlast")
        self.menuAlignment = QtWidgets.QMenu(self.menubar)
        self.menuAlignment.setObjectName("menuAlignment")
        self.menuActivity = QtWidgets.QMenu(self.menubar)
        self.menuActivity.setObjectName("menuActivity")
        self.menuPhylogeneticTree = QtWidgets.QMenu(self.menubar)
        self.menuPhylogeneticTree.setObjectName("menuPhylogeneticTree")
        self.menuTree_visualization = QtWidgets.QMenu(self.menubar)
        self.menuTree_visualization.setObjectName("menuTree_visualization")
        self.menuPCR = QtWidgets.QMenu(self.menubar)
        self.menuPCR.setObjectName("menuPCR")
        self.menuORF = QtWidgets.QMenu(self.menubar)
        self.menuORF.setObjectName("menuORF")
        self.menuAnnotation = QtWidgets.QMenu(self.menubar)
        self.menuAnnotation.setObjectName("menuAnnotation")
        self.menuPlaque = QtWidgets.QMenu(self.menubar)
        self.menuPlaque.setObjectName("menuPlaque")
        self.menuPhage_classification = QtWidgets.QMenu(self.menubar)
        self.menuPhage_classification.setObjectName("menuPhage_classification")
        self.menuClassification = QtWidgets.QMenu(self.menuPhage_classification)
        self.menuClassification.setObjectName("menuClassification")
        self.menuDeeplearning = QtWidgets.QMenu(self.menuPhage_classification)
        self.menuDeeplearning.setObjectName("menuDeeplearning")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        self.menuMetagenomics = QtWidgets.QMenu(self.menuTools)
        self.menuMetagenomics.setObjectName("menuMetagenomics")
        self.menuNetworks = QtWidgets.QMenu(self.menuTools)
        self.menuNetworks.setObjectName("menuNetworks")
        self.menuHelps = QtWidgets.QMenu(self.menubar)
        self.menuHelps.setObjectName("menuHelps")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionBlastN = QtWidgets.QAction(MainWindow)
        self.actionBlastN.setObjectName("actionBlastN")
        self.actionBlastP = QtWidgets.QAction(MainWindow)
        self.actionBlastP.setObjectName("actionBlastP")
        self.actionBlastX = QtWidgets.QAction(MainWindow)
        self.actionBlastX.setObjectName("actionBlastX")
        self.actiontBlastN = QtWidgets.QAction(MainWindow)
        self.actiontBlastN.setObjectName("actiontBlastN")
        self.actiontBlastX = QtWidgets.QAction(MainWindow)
        self.actiontBlastX.setObjectName("actiontBlastX")
        self.actionClustal = QtWidgets.QAction(MainWindow)
        self.actionClustal.setObjectName("actionClustal")
        self.actionMuscle = QtWidgets.QAction(MainWindow)
        self.actionMuscle.setObjectName("actionMuscle")
        self.actionLysin_activity = QtWidgets.QAction(MainWindow)
        self.actionLysin_activity.setObjectName("actionLysin_activity")
        self.actionPeptides_activity = QtWidgets.QAction(MainWindow)
        self.actionPeptides_activity.setObjectName("actionPeptides_activity")
        self.actionIQtree = QtWidgets.QAction(MainWindow)
        self.actionIQtree.setObjectName("actionIQtree")
        self.actionFasttree = QtWidgets.QAction(MainWindow)
        self.actionFasttree.setObjectName("actionFasttree")
        self.actionRaxml = QtWidgets.QAction(MainWindow)
        self.actionRaxml.setObjectName("actionRaxml")
        self.actionPhy_tree = QtWidgets.QAction(MainWindow)
        self.actionPhy_tree.setObjectName("actionPhy_tree")
        self.actionPCR = QtWidgets.QAction(MainWindow)
        self.actionPCR.setObjectName("actionPCR")
        self.actionProdigal = QtWidgets.QAction(MainWindow)
        self.actionProdigal.setObjectName("actionProdigal")
        self.actionCircos = QtWidgets.QAction(MainWindow)
        self.actionCircos.setObjectName("actionCircos")
        self.actionBlast_visualization = QtWidgets.QAction(MainWindow)
        self.actionBlast_visualization.setObjectName("actionBlast_visualization")
        self.actionGene_structure_visualization = QtWidgets.QAction(MainWindow)
        self.actionGene_structure_visualization.setObjectName("actionGene_structure_visualization")
        self.actionProtvista = QtWidgets.QAction(MainWindow)
        self.actionProtvista.setObjectName("actionProtvista")
        self.actionPlaque_count = QtWidgets.QAction(MainWindow)
        self.actionPlaque_count.setObjectName("actionPlaque_count")
        self.actionStep1_VipTree = QtWidgets.QAction(MainWindow)
        self.actionStep1_VipTree.setObjectName("actionStep1_VipTree")
        self.actionStep2_VIRIDIC = QtWidgets.QAction(MainWindow)
        self.actionStep2_VIRIDIC.setObjectName("actionStep2_VIRIDIC")
        self.actionStep3_Alignment = QtWidgets.QAction(MainWindow)
        self.actionStep3_Alignment.setObjectName("actionStep3_Alignment")
        self.actionStep4_Treeing = QtWidgets.QAction(MainWindow)
        self.actionStep4_Treeing.setObjectName("actionStep4_Treeing")
        self.actionPhaMer = QtWidgets.QAction(MainWindow)
        self.actionPhaMer.setObjectName("actionPhaMer")
        self.actionPhaGCN = QtWidgets.QAction(MainWindow)
        self.actionPhaGCN.setObjectName("actionPhaGCN")
        self.actionPhaTYP = QtWidgets.QAction(MainWindow)
        self.actionPhaTYP.setObjectName("actionPhaTYP")
        self.actionCHERRY = QtWidgets.QAction(MainWindow)
        self.actionCHERRY.setObjectName("actionCHERRY")
        self.action_ShinyDiff = QtWidgets.QAction(MainWindow)
        self.action_ShinyDiff.setObjectName("action_ShinyDiff")
        self.actionShinyVolc = QtWidgets.QAction(MainWindow)
        self.actionShinyVolc.setObjectName("actionShinyVolc")
        self.actionShinyGenomicPCA = QtWidgets.QAction(MainWindow)
        self.actionShinyGenomicPCA.setObjectName("actionShinyGenomicPCA")
        self.actionMLST = QtWidgets.QAction(MainWindow)
        self.actionMLST.setObjectName("actionMLST")
        self.actionSerotype = QtWidgets.QAction(MainWindow)
        self.actionSerotype.setObjectName("actionSerotype")
        self.actionGene_identification = QtWidgets.QAction(MainWindow)
        self.actionGene_identification.setObjectName("actionGene_identification")
        self.actionCore_genome_analysis = QtWidgets.QAction(MainWindow)
        self.actionCore_genome_analysis.setObjectName("actionCore_genome_analysis")
        self.actionMicroWGCNA = QtWidgets.QAction(MainWindow)
        self.actionMicroWGCNA.setObjectName("actionMicroWGCNA")
        self.actionShiny3Dprotein = QtWidgets.QAction(MainWindow)
        self.actionShiny3Dprotein.setObjectName("actionShiny3Dprotein")
        self.actionIGV = QtWidgets.QAction(MainWindow)
        self.actionIGV.setObjectName("actionIGV")
        self.actionJSalignment = QtWidgets.QAction(MainWindow)
        self.actionJSalignment.setObjectName("actionJSalignment")
        self.actionStep5_Phylogeny = QtWidgets.QAction(MainWindow)
        self.actionStep5_Phylogeny.setObjectName("actionStep5_Phylogeny")
        self.actionDiversity = QtWidgets.QAction(MainWindow)
        self.actionDiversity.setObjectName("actionDiversity")
        self.actionShinyDiff = QtWidgets.QAction(MainWindow)
        self.actionShinyDiff.setObjectName("actionShinyDiff")
        self.actionShinyNMDS = QtWidgets.QAction(MainWindow)
        self.actionShinyNMDS.setObjectName("actionShinyNMDS")
        self.actionShinyPCOA = QtWidgets.QAction(MainWindow)
        self.actionShinyPCOA.setObjectName("actionShinyPCOA")
        self.actionShinyMCA = QtWidgets.QAction(MainWindow)
        self.actionShinyMCA.setObjectName("actionShinyMCA")
        self.actionShinyVolc_2 = QtWidgets.QAction(MainWindow)
        self.actionShinyVolc_2.setObjectName("actionShinyVolc_2")
        self.actionShinyTimeSeries = QtWidgets.QAction(MainWindow)
        self.actionShinyTimeSeries.setObjectName("actionShinyTimeSeries")
        self.actionShinyMicroWGCNA = QtWidgets.QAction(MainWindow)
        self.actionShinyMicroWGCNA.setObjectName("actionShinyMicroWGCNA")
        self.actionShinyBioMiCo = QtWidgets.QAction(MainWindow)
        self.actionShinyBioMiCo.setObjectName("actionShinyBioMiCo")
        self.actionShinySpiecEasi = QtWidgets.QAction(MainWindow)
        self.actionShinySpiecEasi.setObjectName("actionShinySpiecEasi")
        self.actionShinyCCLasso = QtWidgets.QAction(MainWindow)
        self.actionShinyCCLasso.setObjectName("actionShinyCCLasso")
        self.actionShinyDiffCoEx = QtWidgets.QAction(MainWindow)
        self.actionShinyDiffCoEx.setObjectName("actionShinyDiffCoEx")
        self.actionShinyREBACCA = QtWidgets.QAction(MainWindow)
        self.actionShinyREBACCA.setObjectName("actionShinyREBACCA")
        self.actionShinyProtparam = QtWidgets.QAction(MainWindow)
        self.actionShinyProtparam.setObjectName("actionShinyProtparam")
        self.actionShinyBatch = QtWidgets.QAction(MainWindow)
        self.actionShinyBatch.setObjectName("actionShinyBatch")
        self.actionReadme = QtWidgets.QAction(MainWindow)
        self.actionReadme.setObjectName("actionReadme")
        self.actionChemical_Formula = QtWidgets.QAction(MainWindow)
        self.actionChemical_Formula.setObjectName("actionChemical_Formula")
        self.actionShinyMap = QtWidgets.QAction(MainWindow)
        self.actionShinyMap.setObjectName("actionShinyMap")
        self.actionPlaque_count_V2 = QtWidgets.QAction(MainWindow)
        self.actionPlaque_count_V2.setObjectName("actionPlaque_count_V2")
        self.actionProkka = QtWidgets.QAction(MainWindow)
        self.actionProkka.setObjectName("actionProkka")
        self.actionFastANI = QtWidgets.QAction(MainWindow)
        self.actionFastANI.setObjectName("actionFastANI")
        self.actionShinyTMscoreAlign = QtWidgets.QAction(MainWindow)
        self.actionShinyTMscoreAlign.setObjectName("actionShinyTMscoreAlign")
        self.actionMafft = QtWidgets.QAction(MainWindow)
        self.actionMafft.setObjectName("actionMafft")
        self.actionARAGORN = QtWidgets.QAction(MainWindow)
        self.actionARAGORN.setObjectName("actionARAGORN")
        self.actionCDhit = QtWidgets.QAction(MainWindow)
        self.actionCDhit.setObjectName("actionCDhit")
        self.actionGenomad = QtWidgets.QAction(MainWindow)
        self.actionGenomad.setObjectName("actionGenomad")
        self.actionGBK2JSON = QtWidgets.QAction(MainWindow)
        self.actionGBK2JSON.setObjectName("actionGBK2JSON")
        self.actionBugbase = QtWidgets.QAction(MainWindow)
        self.actionBugbase.setObjectName("actionBugbase")
        self.actionShinyBAE = QtWidgets.QAction(MainWindow)
        self.actionShinyBAE.setObjectName("actionShinyBAE")
        self.menuBlast.addAction(self.actionBlastN)
        self.menuBlast.addAction(self.actionBlastP)
        self.menuBlast.addAction(self.actionBlastX)
        self.menuBlast.addAction(self.actiontBlastN)
        self.menuBlast.addAction(self.actiontBlastX)
        self.menuAlignment.addAction(self.actionClustal)
        self.menuAlignment.addAction(self.actionMuscle)
        self.menuAlignment.addAction(self.actionJSalignment)
        self.menuAlignment.addAction(self.actionMafft)
        self.menuActivity.addAction(self.actionLysin_activity)
        self.menuActivity.addAction(self.actionPeptides_activity)
        self.menuPhylogeneticTree.addAction(self.actionIQtree)
        self.menuPhylogeneticTree.addAction(self.actionFasttree)
        self.menuPhylogeneticTree.addAction(self.actionRaxml)
        self.menuTree_visualization.addAction(self.actionPhy_tree)
        self.menuPCR.addAction(self.actionPCR)
        self.menuORF.addAction(self.actionProdigal)
        self.menuAnnotation.addAction(self.actionProkka)
        self.menuAnnotation.addAction(self.actionCircos)
        self.menuAnnotation.addAction(self.actionBlast_visualization)
        self.menuAnnotation.addAction(self.actionGene_structure_visualization)
        self.menuAnnotation.addAction(self.actionProtvista)
        self.menuAnnotation.addAction(self.actionGBK2JSON)
        self.menuPlaque.addAction(self.actionPlaque_count)
        self.menuPlaque.addAction(self.actionPlaque_count_V2)
        self.menuClassification.addAction(self.actionStep1_VipTree)
        self.menuClassification.addAction(self.actionStep2_VIRIDIC)
        self.menuClassification.addAction(self.actionStep3_Alignment)
        self.menuClassification.addAction(self.actionStep4_Treeing)
        self.menuClassification.addAction(self.actionStep5_Phylogeny)
        self.menuDeeplearning.addAction(self.actionPhaMer)
        self.menuDeeplearning.addAction(self.actionPhaGCN)
        self.menuDeeplearning.addAction(self.actionPhaTYP)
        self.menuDeeplearning.addAction(self.actionCHERRY)
        self.menuPhage_classification.addAction(self.menuClassification.menuAction())
        self.menuPhage_classification.addAction(self.menuDeeplearning.menuAction())
        self.menuMetagenomics.addAction(self.actionDiversity)
        self.menuMetagenomics.addAction(self.actionShinyDiff)
        self.menuMetagenomics.addAction(self.actionShinyNMDS)
        self.menuMetagenomics.addAction(self.actionShinyPCOA)
        self.menuMetagenomics.addAction(self.actionShinyMCA)
        self.menuMetagenomics.addAction(self.actionShinyVolc_2)
        self.menuMetagenomics.addAction(self.actionShinyTimeSeries)
        self.menuMetagenomics.addAction(self.actionShinyBatch)
        self.menuMetagenomics.addAction(self.actionBugbase)
        self.menuNetworks.addAction(self.actionShinyMicroWGCNA)
        self.menuNetworks.addAction(self.actionShinyBioMiCo)
        self.menuNetworks.addAction(self.actionShinySpiecEasi)
        self.menuNetworks.addAction(self.actionShinyREBACCA)
        self.menuNetworks.addAction(self.actionShinyCCLasso)
        self.menuNetworks.addAction(self.actionShinyDiffCoEx)
        self.menuTools.addAction(self.actionMLST)
        self.menuTools.addAction(self.actionSerotype)
        self.menuTools.addAction(self.actionGene_identification)
        self.menuTools.addAction(self.actionCore_genome_analysis)
        self.menuTools.addAction(self.actionShinyProtparam)
        self.menuTools.addAction(self.actionShinyGenomicPCA)
        self.menuTools.addAction(self.actionShiny3Dprotein)
        self.menuTools.addAction(self.actionIGV)
        self.menuTools.addAction(self.menuMetagenomics.menuAction())
        self.menuTools.addAction(self.menuNetworks.menuAction())
        self.menuTools.addAction(self.actionChemical_Formula)
        self.menuTools.addAction(self.actionShinyMap)
        self.menuTools.addAction(self.actionFastANI)
        self.menuTools.addAction(self.actionShinyTMscoreAlign)
        self.menuTools.addAction(self.actionARAGORN)
        self.menuTools.addAction(self.actionCDhit)
        self.menuTools.addAction(self.actionGenomad)
        self.menuTools.addAction(self.actionShinyBAE)
        self.menuHelps.addAction(self.actionReadme)
        self.menubar.addAction(self.menuBlast.menuAction())
        self.menubar.addAction(self.menuAlignment.menuAction())
        self.menubar.addAction(self.menuActivity.menuAction())
        self.menubar.addAction(self.menuPhylogeneticTree.menuAction())
        self.menubar.addAction(self.menuTree_visualization.menuAction())
        self.menubar.addAction(self.menuPCR.menuAction())
        self.menubar.addAction(self.menuORF.menuAction())
        self.menubar.addAction(self.menuAnnotation.menuAction())
        self.menubar.addAction(self.menuPlaque.menuAction())
        self.menubar.addAction(self.menuPhage_classification.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuHelps.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        # pages action
        self.actionBlastN.triggered.connect(self.blastn_show)
        self.actionBlastP.triggered.connect(self.blastp_show)
        self.actionBlastX.triggered.connect(self.blastx_show)
        self.actiontBlastN.triggered.connect(self.tblastn_show)
        self.actiontBlastX.triggered.connect(self.tblastx_show)

        self.actionClustal.triggered.connect(self.clustal_show)
        self.actionMuscle.triggered.connect(self.muscle_show)
        self.actionJSalignment.triggered.connect(self.JSalignment_show)
        self.actionMafft.triggered.connect(self.mafft_show)

        self.actionLysin_activity.triggered.connect(self.lysins_show)
        self.actionPeptides_activity.triggered.connect(self.peptides_show)

        self.actionIQtree.triggered.connect(self.iqtree_show)
        self.actionFasttree.triggered.connect(self.fasttree_show)
        self.actionRaxml.triggered.connect(self.raxml_show)

        self.actionPhy_tree.triggered.connect(self.treevis_show)

        self.actionPCR.triggered.connect(self.pcr_show)

        self.actionProdigal.triggered.connect(self.prodigal_show)

        self.actionProkka.triggered.connect(self.prokka_show)
        self.actionCircos.triggered.connect(self.circos_show)
        self.actionBlast_visualization.triggered.connect(self.blasterjs_show)
        self.actionGene_structure_visualization.triggered.connect(self.collinearity_show)
        self.actionProtvista.triggered.connect(self.protvista_show)
        self.actionGBK2JSON.triggered.connect(self.gbk2json_show)

        self.actionPlaque_count.triggered.connect(self.plaque_show)
        self.actionPlaque_count_V2.triggered.connect(self.plaque_V2_show)

        self.actionStep1_VipTree.triggered.connect(self.viptree_show)
        self.actionStep2_VIRIDIC.triggered.connect(self.viridic_show)
        self.actionStep3_Alignment.triggered.connect(self.muscle_show)
        self.actionStep4_Treeing.triggered.connect(self.iqtree_show)
        self.actionStep5_Phylogeny.triggered.connect(self.phylotreejs_show)
        self.actionPhaMer.triggered.connect(self.phamer_show)
        self.actionPhaTYP.triggered.connect(self.phatyp_show)
        self.actionPhaGCN.triggered.connect(self.phagcn_show)
        self.actionCHERRY.triggered.connect(self.cherry_show)

        self.actionMLST.triggered.connect(self.mlst_show)
        self.actionSerotype.triggered.connect(self.serotype_show)
        self.actionGene_identification.triggered.connect(self.geneidentification_show)
        self.actionCore_genome_analysis.triggered.connect(self.coregenome_show)
        self.actionShinyProtparam.triggered.connect(self.shinyprotparam_show)
        self.actionShinyPCOA.triggered.connect(self.shinypcoa_show)
        self.actionShinyMCA.triggered.connect(self.shinymca_show)
        self.actionShinyBatch.triggered.connect(self.shinybatch_show)
        self.actionBugbase.triggered.connect(self.bugbase_show)
        self.actionShiny3Dprotein.triggered.connect(self.shiny3dprotein_show)
        self.actionShinyGenomicPCA.triggered.connect(self.shinygenomepca_show)
        self.actionShinyMap.triggered.connect(self.shinymap_show)
        self.actionShinyNMDS.triggered.connect(self.shinynmds_show)
        self.actionShinyDiff.triggered.connect(self.shinydiff_show)
        self.actionChemical_Formula.triggered.connect(self.chemicalformula_show)
        self.actionFastANI.triggered.connect(self.fastani_show)
        self.actionShinyTMscoreAlign.triggered.connect(self.shinytmscorealign_show)
        self.actionShinyVolc_2.triggered.connect(self.shinyvolc_show)
        self.actionARAGORN.triggered.connect(self.aragorn_show)
        self.actionCDhit.triggered.connect(self.cdhit_show)
        self.actionGenomad.triggered.connect(self.genomad_show)
        self.actionShinyBAE.triggered.connect(self.shinybae_show)

        # pages action combobox
        self.comboBox.currentIndexChanged.connect(self.selectionchange_comboBox)
        self.comboBox_2.currentIndexChanged.connect(self.selectionchange_comboBox_2)
        self.comboBox_3.currentIndexChanged.connect(self.selectionchange_comboBox_3)
        self.comboBox_4.currentIndexChanged.connect(self.selectionchange_comboBox_4)
        self.comboBox_5.currentIndexChanged.connect(self.selectionchange_comboBox_5)
        self.comboBox_6.currentIndexChanged.connect(self.selectionchange_comboBox_6)
        self.comboBox_7.currentIndexChanged.connect(self.selectionchange_comboBox_7)
        self.comboBox_8.currentIndexChanged.connect(self.selectionchange_comboBox_8)
        self.comboBox_9.currentIndexChanged.connect(self.selectionchange_comboBox_9)
        self.comboBox_10.currentIndexChanged.connect(self.selectionchange_comboBox_10)
        self.comboBox_11.currentIndexChanged.connect(self.selectionchange_comboBox_11)
        self.comboBox_12.currentIndexChanged.connect(self.selectionchange_comboBox_12)
        self.comboBox_13.currentIndexChanged.connect(self.selectionchange_comboBox_13)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MicroWorldOmics"))
        self.comboBox.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox.setItemText(1, _translate("MainWindow", "BlastN"))
        self.comboBox.setItemText(2, _translate("MainWindow", "BlastP"))
        self.comboBox.setItemText(3, _translate("MainWindow", "BlastX"))
        self.comboBox.setItemText(4, _translate("MainWindow", "tBlastN"))
        self.comboBox.setItemText(5, _translate("MainWindow", "tBlastX"))
        self.label.setText(_translate("MainWindow", "Blast"))
        self.label_2.setText(_translate("MainWindow", "Alignment"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "Clustal"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "Muscle"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "JSalignment"))
        self.comboBox_2.setItemText(4, _translate("MainWindow", "Mafft"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "For Lysins"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "For Peptides"))
        self.label_3.setText(_translate("MainWindow", "Phage Lysins/Peptides"))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "IQtree"))
        self.comboBox_4.setItemText(2, _translate("MainWindow", "Raxml"))
        self.comboBox_4.setItemText(3, _translate("MainWindow", "Fasttree"))
        self.label_4.setText(_translate("MainWindow", "Phylogenetic tree"))
        self.comboBox_5.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_5.setItemText(1, _translate("MainWindow", "Phy_tree"))
        self.label_5.setText(_translate("MainWindow", "Tree visualization"))
        self.comboBox_6.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_6.setItemText(1, _translate("MainWindow", "PCR"))
        self.label_6.setText(_translate("MainWindow", "PCR amplification"))
        self.comboBox_8.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_8.setItemText(1, _translate("MainWindow", "Prokka"))
        self.comboBox_8.setItemText(2, _translate("MainWindow", "Circos annotation"))
        self.comboBox_8.setItemText(3, _translate("MainWindow", "Blast visualization"))
        self.comboBox_8.setItemText(4, _translate("MainWindow", "Collinearity"))
        self.comboBox_8.setItemText(5, _translate("MainWindow", "Protvista"))
        self.comboBox_8.setItemText(6, _translate("MainWindow", "GBK2JSON"))
        self.label_8.setText(_translate("MainWindow", "Annotation"))
        self.comboBox_9.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_9.setItemText(1, _translate("MainWindow", "Plaque count"))
        self.comboBox_9.setItemText(2, _translate("MainWindow", "Plaque count V2"))
        self.label_9.setText(_translate("MainWindow", "Plaque recognition"))
        self.comboBox_10.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_10.setItemText(1, _translate("MainWindow", "Step1 VipTree"))
        self.comboBox_10.setItemText(2, _translate("MainWindow", "Step2 VIRIDIC"))
        self.comboBox_10.setItemText(3, _translate("MainWindow", "Step3 Alignment"))
        self.comboBox_10.setItemText(4, _translate("MainWindow", "Step4 Treeing"))
        self.comboBox_10.setItemText(5, _translate("MainWindow", "Step5 Phylogeny"))
        self.label_10.setText(_translate("MainWindow", "Phage classification"))
        self.label_11.setText(_translate("MainWindow", "Phage deeplearning tools"))
        self.comboBox_11.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_11.setItemText(1, _translate("MainWindow", "PhaMer"))
        self.comboBox_11.setItemText(2, _translate("MainWindow", "PhaGCN"))
        self.comboBox_11.setItemText(3, _translate("MainWindow", "PhaTYP"))
        self.comboBox_11.setItemText(4, _translate("MainWindow", "CHERRY"))
        self.label_12.setText(_translate("MainWindow", "Useful tools"))
        self.comboBox_12.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_12.setItemText(1, _translate("MainWindow", "MLST"))
        self.comboBox_12.setItemText(2, _translate("MainWindow", "Serotype"))
        self.comboBox_12.setItemText(3, _translate("MainWindow", "Gene identification"))
        self.comboBox_12.setItemText(4, _translate("MainWindow", "Core genome analysis"))
        self.comboBox_12.setItemText(5, _translate("MainWindow", "ShinyProtparam"))
        self.comboBox_12.setItemText(6, _translate("MainWindow", "ShinyGenomicPCA"))
        self.comboBox_12.setItemText(7, _translate("MainWindow", "Shiny3Dprotein"))
        self.comboBox_12.setItemText(8, _translate("MainWindow", "MicroWGCNA"))
        self.comboBox_12.setItemText(9, _translate("MainWindow", "Shiny3Dprotein"))
        self.comboBox_12.setItemText(10, _translate("MainWindow", "IGV"))
        self.comboBox_12.setItemText(11, _translate("MainWindow", "Chemical Formula"))
        self.comboBox_12.setItemText(12, _translate("MainWindow", "ShinyMap"))
        self.comboBox_12.setItemText(13, _translate("MainWindow", "FastANI"))
        self.comboBox_12.setItemText(14, _translate("MainWindow", "ShinyTMscoreAlign"))
        self.comboBox_12.setItemText(15, _translate("MainWindow", "ARAGORN"))
        self.comboBox_12.setItemText(16, _translate("MainWindow", "CDhit"))
        self.comboBox_12.setItemText(17, _translate("MainWindow", "Genomad"))
        self.comboBox_12.setItemText(18, _translate("MainWindow", "ShinyBAE"))
        self.comboBox_7.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_7.setItemText(1, _translate("MainWindow", "Prodigal"))
        self.label_7.setText(_translate("MainWindow", "ORF prediction"))
        self.label_15.setText(_translate("MainWindow", "Metagenomics/Amplicons"))
        self.comboBox_13.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_13.setItemText(1, _translate("MainWindow", "ShinyDiversity"))
        self.comboBox_13.setItemText(2, _translate("MainWindow", "ShinyDiff"))
        self.comboBox_13.setItemText(3, _translate("MainWindow", "ShinyNMDS"))
        self.comboBox_13.setItemText(4, _translate("MainWindow", "ShinyPCoA"))
        self.comboBox_13.setItemText(5, _translate("MainWindow", "ShinyMCA"))
        self.comboBox_13.setItemText(6, _translate("MainWindow", "ShinyVolc"))
        self.comboBox_13.setItemText(7, _translate("MainWindow", "ShinyTimeSeries"))
        self.comboBox_13.setItemText(8, _translate("MainWindow", "ShinyBatch"))
        self.comboBox_13.setItemText(9, _translate("MainWindow", "Bugbase"))
        self.label_16.setText(_translate("MainWindow", "Networks"))
        self.comboBox_14.setItemText(0, _translate("MainWindow", "<Default>"))
        self.comboBox_14.setItemText(1, _translate("MainWindow", "ShinyMicroWGCNA"))
        self.comboBox_14.setItemText(2, _translate("MainWindow", "ShinyBioMiCo"))
        self.comboBox_14.setItemText(3, _translate("MainWindow", "ShinySpiecEasi"))
        self.comboBox_14.setItemText(4, _translate("MainWindow", "ShinyREBACCA"))
        self.comboBox_14.setItemText(5, _translate("MainWindow", "ShinyCCLasso"))
        self.comboBox_14.setItemText(6, _translate("MainWindow", "ShinyDiffCoEx"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Times New Roman\'; font-size:9pt; font-weight:600; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">MicroWorldOmics V1.2</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:10pt; font-style:italic; color:rgba(0,0,0,0.8);\">Github</span><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,0,0,0.8);\">: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,0,0,0.8);\">  https://github.com/hzaurzli</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:10pt; font-style:italic; color:rgba(0,0,0,0.8);\">SourceCodes</span><span style=\" font-family:\'SimSun\'; font-size:10pt; font-weight:400;\">: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,0,0,0.8);\">  https://github.com/hzaurzli/MicroWorldOmics</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:10pt; font-style:italic; color:rgba(0,0,0,0.8);\">Download</span><span style=\" font-family:\'SimSun\'; font-size:10pt; font-weight:400;\">: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,0,0,0.8);\">  https://github.com/hzaurzli/MicroWorldOmics</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:10pt; font-style:italic; color:rgba(0,0,0,0.8);\">Email</span><span style=\" font-family:\'SimSun\'; font-size:10pt; font-weight:400; font-style:italic;\">: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,0,0,0.8);\">  yun_act@163.com</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:10pt; font-style:italic; color:rgba(0,0,0,0.8);\">Hiplot</span><span style=\" font-family:\'SimSun\'; font-size:10pt; font-style:italic;\">: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,0,0,0.8);\">  https://hiplot.com.cn/cloud-tool/hiker-land/2525607?tab=1</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:10pt; font-style:italic; color:rgba(0,0,0,0.8);\">Jianshu</span><span style=\" font-family:\'SimSun\'; font-size:10pt; font-style:italic;\">: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,0,0,0.8);\">  https://www.jianshu.com/u/ecfc4115cd90</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:10pt; font-style:italic; color:rgba(0,0,0,0.8);\">Yueque</span><span style=\" font-family:\'SimSun\'; font-size:10pt; font-style:italic;\">: </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,0,0,0.8);\">  https://www.yuque.com/u1629231/qd3xf6</span></p></body></html>"))
        self.label_14.setToolTip(_translate("MainWindow", "<html><head/><body><p>dad</p></body></html>"))
        self.label_14.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-style:italic;\">Maintainer</span><span style=\" font-size:12pt;\">: </span></p><p align=\"center\"><span style=\" font-size:12pt;\">Small Runze</span></p></body></html>"))
        self.textBrowser_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Times New Roman\'; font-size:9pt; font-weight:600; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">MicroWorldOmics Logs</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'-webkit-standard\'; color:rgba(0,0,255,0.8);\">Introduction: </span><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,0,0,0.8);\">Micro-worldOmics</span><span style=\" font-family:\'-webkit-standard\'; color:rgba(0,0,0,0.8);\"> </span><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,0,0,0.8);\">(a convenient software for microscopic world analysis and visualization), a desktop software developed based on </span><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,136,0,0.8);\">PYQT (version=5), R (version=4.0)，Python (version=3.6) and JavaScript, </span><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(0,0,0,0.8);\">which aims to make new exploration and contribution to the development of bioinformatics. </span><span style=\" font-family:\'-webkit-standard\'; font-size:8pt; color:rgba(255,0,0,0.8);\">Realizing data analysis and visualization in the fields of algorithm statistics, sequence analysis, microbiomics , virology,image recognition etc.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt;\">MicroWorldOmics V1.0 2023.1</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:10pt;\"><br /></p></body></html>"))
        self.menuBlast.setTitle(_translate("MainWindow", "Blast"))
        self.menuAlignment.setTitle(_translate("MainWindow", "Alignment"))
        self.menuActivity.setTitle(_translate("MainWindow", "Activity"))
        self.menuPhylogeneticTree.setTitle(_translate("MainWindow", "PhylogeneticTree"))
        self.menuTree_visualization.setTitle(_translate("MainWindow", "TreeVisualization"))
        self.menuPCR.setTitle(_translate("MainWindow", "PCR"))
        self.menuORF.setTitle(_translate("MainWindow", "ORF"))
        self.menuAnnotation.setTitle(_translate("MainWindow", "Annotation"))
        self.menuPlaque.setTitle(_translate("MainWindow", "Plaque"))
        self.menuPhage_classification.setTitle(_translate("MainWindow", "Phage"))
        self.menuClassification.setTitle(_translate("MainWindow", "Classification"))
        self.menuDeeplearning.setTitle(_translate("MainWindow", "Deeplearning"))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.menuMetagenomics.setTitle(_translate("MainWindow", "Metagenomics/Amplicons"))
        self.menuNetworks.setTitle(_translate("MainWindow", "Networks"))
        self.menuHelps.setTitle(_translate("MainWindow", "Helps"))
        self.actionBlastN.setText(_translate("MainWindow", "BlastN"))
        self.actionBlastP.setText(_translate("MainWindow", "BlastP"))
        self.actionBlastX.setText(_translate("MainWindow", "BlastX"))
        self.actiontBlastN.setText(_translate("MainWindow", "tBlastN"))
        self.actiontBlastX.setText(_translate("MainWindow", "tBlastX"))
        self.actionClustal.setText(_translate("MainWindow", "Clustal"))
        self.actionMuscle.setText(_translate("MainWindow", "Muscle"))
        self.actionLysin_activity.setText(_translate("MainWindow", "Lysins activity"))
        self.actionPeptides_activity.setText(_translate("MainWindow", "Peptides activity"))
        self.actionIQtree.setText(_translate("MainWindow", "IQtree"))
        self.actionFasttree.setText(_translate("MainWindow", "Fasttree"))
        self.actionRaxml.setText(_translate("MainWindow", "Raxml"))
        self.actionPhy_tree.setText(_translate("MainWindow", "Phy_tree"))
        self.actionPCR.setText(_translate("MainWindow", "PCR"))
        self.actionProdigal.setText(_translate("MainWindow", "Prodigal"))
        self.actionCircos.setText(_translate("MainWindow", "Circos"))
        self.actionBlast_visualization.setText(_translate("MainWindow", "Blast visualization"))
        self.actionGene_structure_visualization.setText(_translate("MainWindow", "Collinearity"))
        self.actionProtvista.setText(_translate("MainWindow", "Protvista"))
        self.actionPlaque_count.setText(_translate("MainWindow", "Plaque count"))
        self.actionStep1_VipTree.setText(_translate("MainWindow", "Step1 VipTree"))
        self.actionStep2_VIRIDIC.setText(_translate("MainWindow", "Step2 VIRIDIC"))
        self.actionStep3_Alignment.setText(_translate("MainWindow", "Step3 Alignment"))
        self.actionStep4_Treeing.setText(_translate("MainWindow", "Step4 Treeing"))
        self.actionPhaMer.setText(_translate("MainWindow", "PhaMer"))
        self.actionPhaGCN.setText(_translate("MainWindow", "PhaGCN"))
        self.actionPhaTYP.setText(_translate("MainWindow", "PhaTYP"))
        self.actionCHERRY.setText(_translate("MainWindow", "CHERRY"))
        self.action_ShinyDiff.setText(_translate("MainWindow", "ShinyDiff"))
        self.actionShinyVolc.setText(_translate("MainWindow", "ShinyVolc"))
        self.actionShinyGenomicPCA.setText(_translate("MainWindow", "ShinyGenomicPCA"))
        self.actionMLST.setText(_translate("MainWindow", "MLST"))
        self.actionSerotype.setText(_translate("MainWindow", "Serotype"))
        self.actionGene_identification.setText(_translate("MainWindow", "Gene identification"))
        self.actionCore_genome_analysis.setText(_translate("MainWindow", "Core genome analysis"))
        self.actionMicroWGCNA.setText(_translate("MainWindow", "MicroWGCNA"))
        self.actionShiny3Dprotein.setText(_translate("MainWindow", "Shiny3Dprotein"))
        self.actionIGV.setText(_translate("MainWindow", "IGV"))
        self.actionJSalignment.setText(_translate("MainWindow", "JSalignment"))
        self.actionStep5_Phylogeny.setText(_translate("MainWindow", "Step5 Phylogeny"))
        self.actionDiversity.setText(_translate("MainWindow", "ShinyDiversity"))
        self.actionShinyDiff.setText(_translate("MainWindow", "ShinyDiff"))
        self.actionShinyNMDS.setText(_translate("MainWindow", "ShinyNMDS"))
        self.actionShinyPCOA.setText(_translate("MainWindow", "ShinyPCoA"))
        self.actionShinyMCA.setText(_translate("MainWindow", "ShinyMCA"))
        self.actionShinyVolc_2.setText(_translate("MainWindow", "ShinyVolc"))
        self.actionShinyTimeSeries.setText(_translate("MainWindow", "ShinyTimeSeries"))
        self.actionShinyMicroWGCNA.setText(_translate("MainWindow", "ShinyMicroWGCNA"))
        self.actionShinyBioMiCo.setText(_translate("MainWindow", "ShinyBioMiCo"))
        self.actionShinySpiecEasi.setText(_translate("MainWindow", "ShinySpiecEasi"))
        self.actionShinyCCLasso.setText(_translate("MainWindow", "ShinyCCLasso"))
        self.actionShinyDiffCoEx.setText(_translate("MainWindow", "ShinyDiffCoEx"))
        self.actionShinyREBACCA.setText(_translate("MainWindow", "ShinyREBACCA"))
        self.actionShinyProtparam.setText(_translate("MainWindow", "ShinyProtparam"))
        self.actionShinyBatch.setText(_translate("MainWindow", "ShinyBatch"))
        self.actionReadme.setText(_translate("MainWindow", "Readme"))
        self.actionChemical_Formula.setText(_translate("MainWindow", "Chemical Formula"))
        self.actionShinyMap.setText(_translate("MainWindow", "ShinyMap"))
        self.actionPlaque_count_V2.setText(_translate("MainWindow", "Plaque count V2"))
        self.actionProkka.setText(_translate("MainWindow", "Prokka"))
        self.actionFastANI.setText(_translate("MainWindow", "FastANI"))
        self.actionShinyTMscoreAlign.setText(_translate("MainWindow", "ShinyTMscoreAlign"))
        self.actionMafft.setText(_translate("MainWindow", "Mafft"))
        self.actionARAGORN.setText(_translate("MainWindow", "ARAGORN"))
        self.actionCDhit.setText(_translate("MainWindow", "CDhit"))
        self.actionGenomad.setText(_translate("MainWindow", "Genomad"))
        self.actionGBK2JSON.setText(_translate("MainWindow", "GBK2JSON"))
        self.actionBugbase.setText(_translate("MainWindow", "Bugbase"))
        self.actionShinyBAE.setText(_translate("MainWindow", "ShinyBAE"))


    def selectionchange_comboBox(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox.currentText()
        print(label_item)
        if label_item == 'BlastN':
            self.blastn_show()
        elif label_item == 'BlastP':
            self.blastp_show()
        elif label_item == 'BlastX':
            self.blastx_show()
        elif label_item == 'tBlastN':
            self.tblastn_show()
        elif label_item == 'tBlastX':
            self.tblastx_show()

    def selectionchange_comboBox_2(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_2.currentText()
        print(label_item)
        if label_item == 'Clustal':
            self.clustal_show()
        elif label_item == 'Muscle':
            self.muscle_show()
        elif label_item == 'JSalignment':
            self.JSalignment_show()
        elif label_item == 'Mafft':
            self.mafft_show()

    def selectionchange_comboBox_3(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_3.currentText()
        print(label_item)
        if label_item == 'For Lysins':
            self.lysins_show()
        elif label_item == 'For Peptides':
            self.peptides_show()

    def selectionchange_comboBox_4(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_4.currentText()
        print(label_item)
        if label_item == 'IQtree':
            self.iqtree_show()
        elif label_item == 'Fasttree':
            self.fasttree_show()
        elif label_item == 'Raxml':
            self.raxml_show()

    def selectionchange_comboBox_5(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_5.currentText()
        print(label_item)
        if label_item == 'Phy_tree':
            self.treevis_show()

    def selectionchange_comboBox_6(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_6.currentText()
        print(label_item)
        if label_item == 'PCR':
            self.pcr_show()

    def selectionchange_comboBox_7(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_7.currentText()
        print(label_item)
        if label_item == 'Prodigal':
            self.prodigal_show()

    def selectionchange_comboBox_8(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_8.currentText()
        print(label_item)
        if label_item == 'Prokka':
            self.prokka_show()
        elif label_item == 'Circos annotation':
            self.circos_show()
        elif label_item == 'Blast visualization':
            self.blasterjs_show()
        elif label_item == 'Collinearity':
            self.collinearity_show()
        elif label_item == 'Protvista':
            self.protvista_show()
        elif label_item == 'GBK2JSON':
            self.gbk2json_show()

    def selectionchange_comboBox_9(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_9.currentText()
        print(label_item)
        if label_item == 'Plaque count':
            self.plaque_show()
        elif label_item == 'Plaque count V2':
            self.plaque_V2_show()

    def selectionchange_comboBox_10(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_10.currentText()
        print(label_item)
        if label_item == 'Step1 VipTree':
            self.viptree_show()
        elif label_item == 'Step2 VIRIDIC':
            self.viridic_show()
        elif label_item == 'Step3 Alignment':
            self.muscle_show()
        elif label_item == 'Step4 Treeing':
            self.iqtree_show()
        elif label_item == 'Step5 Phylogeny':
            self.phylotreejs_show()

    def selectionchange_comboBox_11(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_11.currentText()
        print(label_item)
        if label_item == 'PhaMer':
            self.phamer_show()
        elif label_item == 'PhaTYP':
            self.phatyp_show()
        elif label_item == 'PhaGCN':
            self.phagcn_show()
        elif label_item == 'Cherry':
            self.cherry_show()

    def selectionchange_comboBox_12(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_12.currentText()
        print(label_item)
        if label_item == 'MLST':
            self.mlst_show()
        elif label_item == 'Serotype':
            self.serotype_show()
        elif label_item == 'Gene identification':
            self.geneidentification_show()
        elif label_item == 'Core genome analysis':
            self.coregenome_show()
        elif label_item == 'ShinyProtparam':
            self.shinyprotparam_show()
        elif label_item == 'Chemical Formula':
            self.chemicalformula_show()
        elif label_item == 'FastANI':
            self.fastani_show()
        elif label_item == 'Shiny3Dprotein':
            self.shiny3dprotein_show()
        elif label_item == 'ShinyMap':
            self.shinymap_show()
        elif label_item == 'ShinyGenomePCA':
            self.shinygenomepca_show()
        elif label_item == 'ShinyTMscoreAlign':
            self.shinytmscorealign_show()
        elif label_item == 'ARAGORN':
            self.aragorn_show()
        elif label_item == 'CDhit':
            self.cdhit_show()
        elif label_item == 'Genomad':
            self.genomad_show()
        elif label_item == 'ShinyBAE':
            self.shinybae_show()

    def selectionchange_comboBox_13(self):
        # 标签用来显示选中的文本
        # currentText()：返回选中选项的文本
        label_item = self.comboBox_13.currentText()
        print(label_item)
        if label_item == 'ShinyPCoA':
            self.shinypcoa_show()
        elif label_item == 'ShinyDiff':
            self.shinydiff_show()
        elif label_item == 'ShinyNMDS':
            self.shinynmds_show()
        elif label_item == 'ShinyMCA':
            self.shinymca_show()
        elif label_item == 'ShinyBatch':
            self.shinybatch_show()
        elif label_item == 'ShinyVolc':
            self.shinyvolc_show()
        elif label_item == 'Bugbase':
            self.bugbase_show()


    # pages
    ## click to new window BlastN,BlastN_Form is object in BlastN.py
    def blastn_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = BlastN_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    ## click to new window BlastP,BlastP_Form is object in BlastP.py
    def blastp_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = BlastP_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    ## click to new window BlastX,BlastX_Form is object in BlastX.py
    def blastx_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = BlastX_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    ## click to new window tBlastN,tBlastN_Form is object in tBlastN.py
    def tblastn_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = tBlastN_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    ## click to new window tBlastX,tBlastX_Form is object in tBlastX.py
    def tblastx_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = tBlastX_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def clustal_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = Clustal_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    ## click to new window BlastP,BlastP_Form is object in BlastP.py
    def muscle_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = Muscle_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def JSalignment_show(self):
        self.winTable = JSalignment.JSalignment_Form()
        self.winTable.show()

    def mafft_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = Mafft_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def lysins_show(self):
        self.form = QtWidgets.QMainWindow()
        import Lysins
        self.ui = Lysins_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def peptides_show(self):
        self.form = QtWidgets.QMainWindow()
        import Peptides
        self.ui = Peptides_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def iqtree_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = IQtree_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def fasttree_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = Fasttree_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def raxml_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = Raxml_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def treevis_show(self):
        self.winTable = Treevis.Treevis_Form()
        self.winTable.show()

    def pcr_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = PCR_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def prodigal_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = Prodigal_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def prokka_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = Prokka_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def circos_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = GCview_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def blasterjs_show(self):
        self.winTable = Blasterjs.Blasterjs_Form()
        self.winTable.show()

    def collinearity_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = Clinker_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def protvista_show(self):
        self.form = QtWidgets.QWidget()
        import ProtVista
        self.winTest = ProtVista.winTest()
        self.ui = Protvista_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def gbk2json_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = GBK2JSON_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def plaque_show(self):
        self.form = QtWidgets.QWidget()
        self.Dialog = Dialog()
        self.ui = Dots_counting_Form()
        self.ui.setupUi(self.Dialog)
        self.Dialog.show()

    def plaque_V2_show(self):
        self.form = QtWidgets.QWidget()
        self.Dialog = Dialog()
        self.ui = Dots_counting_V2_Form()
        self.ui.setupUi(self.Dialog)
        self.Dialog.show()

    def viptree_show(self):
        self.winTable = VipTree.VipTree_Form()
        self.winTable.show()

    def viridic_show(self):
        self.winTable = VIRIDIC.VIRIDIC_Form()
        self.winTable.show()

    def phylotreejs_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = Phylotreejs_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def phamer_show(self):
        self.form = QtWidgets.QWidget()
        import PhaMer
        self.winTest = PhaMer.winTest()
        self.ui = PhaMer_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def phatyp_show(self):
        self.form = QtWidgets.QWidget()
        import PhaTYP
        self.winTest = PhaTYP.winTest()
        self.ui = PhaTYP_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def phagcn_show(self):
        self.form = QtWidgets.QWidget()
        import PhaGCN
        self.winTest = PhaGCN.winTest()
        self.ui = PhaGCN_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def cherry_show(self):
        self.form = QtWidgets.QWidget()
        import Cherry
        self.winTest = Cherry.winTest()
        self.ui = Cherry_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def mlst_show(self):
        self.form = QtWidgets.QWidget()
        import MLST
        self.winTest = MLST.winTest()
        self.ui = MLST_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def serotype_show(self):
        self.form = QtWidgets.QWidget()
        import Serotype
        self.winTest = Serotype.winTest()
        self.ui = Serotype_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def geneidentification_show(self):
        self.form = QtWidgets.QWidget()
        import GeneIdentification
        self.winTest = GeneIdentification.winTest()
        self.ui = GeneIdentification_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def coregenome_show(self):
        self.form = QtWidgets.QWidget()
        import CoreGenomeAnalysis
        self.winTest = CoreGenomeAnalysis.winTest()
        self.ui = Core_genome_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def shinyprotparam_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyProtparam
        self.winTest = ShinyProtparam.winTest()
        self.ui = ShinyProtparam_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def shinypcoa_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyPCoA
        self.winTest = ShinyPCoA.winTest()
        self.ui = ShinyPCoA_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def shinybatch_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyBatch
        self.winTest = ShinyBatch.winTest()
        self.ui = ShinyBatch_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def shinyvolc_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyVolc
        self.winTest = ShinyVolc.winTest()
        self.ui = ShinyVolc_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def bugbase_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = Bugbase_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def chemicalformula_show(self):
        self.winTable = Chemicalformula_Form()
        self.winTable.show()

    def shinybatch_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyBatch
        self.winTest = ShinyBatch.winTest()
        self.ui = ShinyBatch_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def shinynmds_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyNMDS
        self.winTest = ShinyNMDS.winTest()
        self.ui = ShinyNMDS_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def shinymca_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyMCA
        self.winTest = ShinyMCA.winTest()
        self.ui = ShinyMCA_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def shinydiff_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyDiff
        self.winTest = ShinyDiff.winTest()
        self.ui = ShinyDiff_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def fastani_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = FastANI_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def shinygenomepca_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyGenomePCA
        self.winTest = ShinyGenomePCA.winTest()
        self.ui = ShinyGenomePCA_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def shinymap_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyMap
        self.winTest = ShinyMap.winTest()
        self.ui = ShinyMap_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def shiny3dprotein_show(self):
        self.form = QtWidgets.QWidget()
        import Shiny3Dprotein
        self.winTest = Shiny3Dprotein.winTest()
        self.ui = Shiny3Dprotein_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def shinytmscorealign_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyTMscoreAlign
        self.winTest = ShinyTMscoreAlign.winTest()
        self.ui = ShinyTMscoreAlign_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

    def aragorn_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = ARAGORN_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def cdhit_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = CDhit_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def genomad_show(self):
        self.form = QtWidgets.QMainWindow()
        self.ui = Genomad_Form()
        self.ui.setupUi(self.form)
        self.form.show()

    def shinybae_show(self):
        self.form = QtWidgets.QWidget()
        import ShinyBAE
        self.winTest = ShinyBAE.winTest()
        self.ui = ShinyBAE_Form()
        self.ui.setupUi(self.winTest)
        self.winTest.show()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    # 启动预加载
    splash = QtWidgets.QSplashScreen(QtGui.QPixmap("./logo/logo.png"))
    splash.setFont(QFont('微软雅黑', 30))
    splash.showMessage("Loading... 0%", QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom, QtCore.Qt.black)
    splash.show()  # 显示启动界面
    QtWidgets.qApp.processEvents()  # 处理主进程事件
    window = MyWindow()
    window.setWindowTitle("QSplashScreen类使用")
    window.resize(500, 50)

    for i in range(1, 11):  # 模拟主程序加载过程
        window.load_data(splash, num=i)  # 加载数据
        if i == 6:
            from Peptides import *
            from Lysins import *
            from PhaMer import *
            from PhaTYP import *
            from PhaGCN import *
            from Cherry import *
            from Prokka import Prokka_Form
            from Bugbase import Bugbase_Form
            from Genomad import Genomad_Form

    splash.finish(window)  # 隐藏启动界面

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

