# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Dots_counting_V2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys,os
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import cv2
import numpy as np
import pandas as pd
from sklearn.cluster import KMeans


class Dialog(QWidget):
    """对QDialog类重写，实现一些功能"""
    def closeEvent(self, event):
        """
        重写closeEvent方法，实现dialog窗体关闭时执行一些代码
        :param event: close()触发的事件
        :return: None
        """
        try:
            if os.path.exists(os.path.dirname(openfile_name) + '/tmp.jpg') == True:
                print(openfile_name)
                os.remove(os.path.dirname(openfile_name) + '/tmp.jpg')
            else:
                event.ignore() # 设置正常退出
        except:
            return None # 设置正常退出


class Dots_counting_V2_Form(QWidget):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(825, 585)
        self.label_8 = QtWidgets.QLabel(Form)
        self.label_8.setGeometry(QtCore.QRect(30, 10, 351, 321))
        self.label_8.setStyleSheet("background-image: url(./logo/white.png)")
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(Form)
        self.label_9.setGeometry(QtCore.QRect(440, 10, 351, 321))
        self.label_9.setStyleSheet("background-image: url(./logo/white.png)")
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 540, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.pushButton_2.setObjectName("pushButton_2")
        self.textEdit = QtWidgets.QTextEdit(Form)
        self.textEdit.setGeometry(QtCore.QRect(150, 370, 121, 31))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_6 = QtWidgets.QTextEdit(Form)
        self.textEdit_6.setGeometry(QtCore.QRect(690, 440, 121, 31))
        self.textEdit_6.setObjectName("textEdit_6")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(300, 370, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.textEdit_7 = QtWidgets.QTextEdit(Form)
        self.textEdit_7.setGeometry(QtCore.QRect(690, 510, 121, 31))
        self.textEdit_7.setObjectName("textEdit_7")
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(170, 500, 111, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(300, 440, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(20, 440, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(590, 370, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setGeometry(QtCore.QRect(590, 440, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.textEdit_5 = QtWidgets.QTextEdit(Form)
        self.textEdit_5.setGeometry(QtCore.QRect(690, 370, 121, 31))
        self.textEdit_5.setObjectName("textEdit_5")
        self.label_7 = QtWidgets.QLabel(Form)
        self.label_7.setGeometry(QtCore.QRect(590, 510, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(20, 370, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.textEdit_3 = QtWidgets.QTextEdit(Form)
        self.textEdit_3.setGeometry(QtCore.QRect(440, 370, 121, 31))
        self.textEdit_3.setObjectName("textEdit_3")
        self.pushButton_1 = QtWidgets.QPushButton(Form)
        self.pushButton_1.setGeometry(QtCore.QRect(20, 500, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.pushButton_1.setFont(font)
        self.pushButton_1.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.pushButton_1.setObjectName("pushButton_1")
        self.textEdit_4 = QtWidgets.QTextEdit(Form)
        self.textEdit_4.setGeometry(QtCore.QRect(440, 440, 121, 31))
        self.textEdit_4.setObjectName("textEdit_4")
        self.textEdit_2 = QtWidgets.QTextEdit(Form)
        self.textEdit_2.setGeometry(QtCore.QRect(150, 440, 121, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_8 = QtWidgets.QTextEdit(Form)
        self.textEdit_8.setGeometry(QtCore.QRect(440, 510, 121, 31))
        self.textEdit_8.setObjectName("textEdit_8")
        self.label_10 = QtWidgets.QLabel(Form)
        self.label_10.setGeometry(QtCore.QRect(300, 500, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        # action
        self.pushButton_1.clicked.connect(self.myAddPic)
        self.pushButton_2.clicked.connect(self.myRemovePic)
        self.pushButton_3.clicked.connect(self.counting)
        # self.pushButton_3.clicked.connect(lambda: self.counting(openfile_name))  # 信号函数传参

        ## Default params
        self.textEdit.setPlaceholderText(" 3.5; step length")
        self.textEdit_2.setPlaceholderText(" 0.6; range 0-1")
        self.textEdit_3.setPlaceholderText(" 0.3; range 0-1")
        self.textEdit_4.setPlaceholderText(" 0.6; range 0-1")
        self.textEdit_5.setPlaceholderText(" 0; range 0-255")
        self.textEdit_6.setPlaceholderText(" 2; range > 0")
        self.textEdit_7.setPlaceholderText(" 100; range > 0")
        self.textEdit_8.setPlaceholderText(" channels: 1")


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Dots counting V2"))
        self.pushButton_2.setText(_translate("Form", "Remove figure"))
        self.label_3.setText(_translate("Form", "MinCircularity:"))
        self.pushButton_3.setText(_translate("Form", "Counting"))
        self.label_4.setText(_translate("Form", "MinInertiaRatio:"))
        self.label_2.setText(_translate("Form", "MinConvexity:"))
        self.label_5.setText(_translate("Form", "BlobColor:"))
        self.label_6.setText(_translate("Form", "MinArea:"))
        self.label_7.setText(_translate("Form", "MaxArea:"))
        self.label.setText(_translate("Form", "ThresholdStep:"))
        self.pushButton_1.setText(_translate("Form", "Add figure"))
        self.label_10.setText(_translate("Form", "Number of\n"
"channels"))

    def myRemovePic(self):
        try:
            self.label_8.setPixmap(QPixmap(""))
            self.label_9.setPixmap(QPixmap(""))
            if os.path.exists(os.path.dirname(openfile_name) + '/tmp.jpg') == True:
                os.remove(os.path.dirname(openfile_name) + '/tmp.jpg')
        except:
            QMessageBox.critical(self, "Critical", "No figures!",
                                 QMessageBox.Yes | QMessageBox.No,
                                 QMessageBox.Yes)

    def myAddPic(self):
        global openfile_name
        openfile_name = QFileDialog.getOpenFileName(self, 'choose figures', '')[0]
        print(openfile_name)
        self.label_8.setPixmap(QPixmap(openfile_name))
        self.label_8.setScaledContents(True)

    def counting(self):

        def cv_show_image(name, img):
            cv2.namedWindow(name, 0)
            cv2.imshow(name, img)
            cv2.waitKey(0)
            cv2.destroyAllWindows()

        try:
            img0 = cv2.imread(openfile_name)
            res = cv2.resize(img0, (500, 500), interpolation=cv2.INTER_CUBIC)
            gray = cv2.cvtColor(res, cv2.COLOR_BGR2GRAY)
            gauss = cv2.GaussianBlur(gray, (9, 9), 0)

            params = cv2.SimpleBlobDetector_Params()
            # parameter
            params.minThreshold = 100
            params.maxThreshold = 255
            try:
                params.thresholdStep = float(self.textEdit.toPlainText())
            except:
                params.thresholdStep = 3.5

            params.filterByColor = True
            # params.blobColor = 0
            try:
                params.blobColor = float(self.textEdit_5.toPlainText())
            except:
                params.blobColor = 0

            params.filterByArea = True
            try:
                params.minArea = float(self.textEdit_6.toPlainText())
            except:
                params.minArea = 2
            try:
                params.maxArea = float(self.textEdit_7.toPlainText())
            except:
                params.maxArea = 100

            params.filterByCircularity = True
            try:
                params.minCircularity = float(self.textEdit_3.toPlainText())
            except:
                params.minCircularity = 0.3

            params.filterByConvexity = True
            try:
                params.minConvexity = float(self.textEdit_2.toPlainText())
            except:
                params.minConvexity = 0.6

            params.filterByInertia = True
            try:
                params.minInertiaRatio = float(self.textEdit_4.toPlainText())
            except:
                params.minInertiaRatio = 0.6

            detector = cv2.SimpleBlobDetector_create(params)
            keypoints = detector.detect(gauss)

            im_with_keypoints = cv2.drawKeypoints(res, keypoints, np.array([]), (0, 0, 255),
                                                  cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

            x_coordinate = []
            for (x, y) in keypoints[0].convert(keypoints):
                x_coordinate.append(x)
                print(x)

            x_coordinate.sort()
            print("共检测出%d个斑点" % len(x_coordinate))
            cv2.imwrite(os.path.dirname(openfile_name) + '/tmp.jpg', im_with_keypoints)
            self.label_9.setPixmap(QPixmap(os.path.dirname(openfile_name) + '/tmp.jpg'))
            self.label_9.setScaledContents(True)

            ######################################################### 分界线
            img = cv2.imread(openfile_name)
            res = cv2.resize(img, (500, 500), interpolation=cv2.INTER_CUBIC)
            res = cv2.GaussianBlur(res, (3, 3), 0)
            gray = cv2.cvtColor(res, cv2.COLOR_BGR2GRAY)
            edges = cv2.Canny(gray, 50, 150, apertureSize=3)
            lines = cv2.HoughLines(edges, 1, np.pi / 180, 110)

            x = []
            for line in lines:
                rho = line[0][0]
                theta = line[0][1]
                a = np.cos(theta)
                b = np.sin(theta)
                x0 = a * rho
                y0 = b * rho
                x1 = int(x0 + 1000 * (-b))
                y1 = int(y0 + 1000 * (a))
                x2 = int(x0 - 1000 * (-b))
                y2 = int(y0 - 1000 * (a))
                x.append(str((x1 + x2) / 2))


            x_sort = x[:]
            x_sort.sort(key=float)
            x_sort = list(map(float, x_sort))

            array_x = np.array(x_sort).reshape(-1, 1)

            try:
                n_clusters = int(self.textEdit_8.toPlainText())
            except:
                n_clusters = 1

            if n_clusters == 1:
                km = KMeans(n_clusters=1, max_iter=1000).fit(array_x)
                y = KMeans(n_clusters=1, max_iter=1000).fit_predict(array_x)  # 会得出每个sample属于哪一类
            else:
                km = KMeans(n_clusters=n_clusters-1, max_iter=1000).fit(array_x)
                y = KMeans(n_clusters=n_clusters-1, max_iter=1000).fit_predict(array_x)  # 会得出每个sample属于哪一类

            dic = {}
            count = 0
            for i in y:
                if i not in dic.keys():
                    dic[i] = []
                    dic[i].append(array_x[count][0])
                    count += 1
                elif i in dic.keys():
                    dic[i].append(array_x[count][0])
                    count += 1

            cutoff = []
            for i in dic:
                cutoff.append(np.median(dic[i]))

            dic_num = {}
            print(x_coordinate)
            for i in range(0, len(dic)):
                dic_num[i] = []

            for ele in x_coordinate:
                if ele < cutoff[0]:
                    dic_num[0].append(ele)
                elif ele >= cutoff[len(cutoff) - 1]:
                    dic_num[len(cutoff) - 1].append(ele)
                else:
                    for num in range(1, len(cutoff) - 1):
                        if cutoff[num - 1] <= ele < cutoff[num]:
                            dic_num[num].append(ele)
            print(dic_num)
            line = ''
            for key in dic_num:
                line = line + str(int(key) + 1) +": dots number is " + str(len(dic_num[key])) + '\n'

            print(line)
            QMessageBox.information(self, "Dots", line,
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)

        except:
            QMessageBox.critical(self, "Critical", "Please adjust the resolution or add your figure!",
                                 QMessageBox.Yes | QMessageBox.No,
                                 QMessageBox.Yes)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Dots_counting_V2_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
