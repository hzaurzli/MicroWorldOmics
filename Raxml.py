# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Raxml.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys,os
import time
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from Bio import SeqIO
import psutil
import shutil


class WorkThread(QThread):
    # 自定义信号对象
    trigger = pyqtSignal(str)

    def __int__(self):
        # 初始化函数
        super(WorkThread, self).__init__()

    def run(self):
        def check_process_running(process_name):  # 检查进程是否运行
            for process in psutil.process_iter(['name']):
                if process.info['name'] == process_name:
                    return True
            return False

        if type == 'A':
            os.popen(r".\tools\raxml\raxmlHPC.exe -f a -s %s -n ex -x 12345 -p 12345 -# %s -m ASC_GTRCAT"
                     % (fasta, bootstrap))

        elif type == 'B':
            os.popen(r".\tools\raxml\raxmlHPC.exe -f a -s %s -n ex -x 12345 -p 12345 -# %s -m GTRGAMMAI"
                     % (fasta, bootstrap))

        elif type == 'C':
            os.popen(r".\tools\raxml\raxmlHPC.exe -f a -s %s -n ex -x 12345 -p 12345 -# %s -m GTRGAMMA"
                     % (fasta, bootstrap))

        elif type == 'D':
            os.popen(r".\tools\raxml\raxmlHPC.exe -f a -s %s -n ex -x 12345 -p 12345 -# %s -m GTRCAT"
                     % (fasta, bootstrap))

        elif type == 'E':
            os.popen(r".\tools\raxml\raxmlHPC.exe -f a -s %s -n ex -x 12345 -p 12345 -# %s -m GTRCATI"
                     % (fasta, bootstrap))

        elif type == 'F':
            os.popen(r".\tools\raxml\raxmlHPC.exe -f a -s %s -n ex -x 12345 -p 12345 -# %s -m ASC_GTRGAMMA"
                     % (fasta, bootstrap))

        elif type == 'G':
            os.popen(r".\tools\raxml\raxmlHPC.exe -f a -s %s -n ex -x 12345 -p 12345 -# %s -m PROTGAMMALGF"
                     % (fasta, bootstrap))

        elif type == 'H':
            os.popen(r".\tools\raxml\raxmlHPC.exe -f a -s %s -n ex -x 12345 -p 12345 -# %s -m PROTGAMMAILGX"
                     % (fasta, bootstrap))

        elif type == 'I':
            os.popen(r".\tools\raxml\raxmlHPC.exe -f a -s %s -n ex -x 12345 -p 12345 -# %s -m PROTGTRGAMMA"
                     % (fasta, bootstrap))

        elif type == 'J':
            os.popen(r".\tools\raxml\raxmlHPC.exe -f a -s %s -n ex -x 12345 -p 12345 -# %s -m  PROTGAMMAAUTO"
                     % (fasta, bootstrap))

        elif type == 'K':
            os.popen(r".\tools\raxml\raxmlHPC.exe -f a -s %s -n ex -x 12345 -p 12345 -# %s -m  PROTGAMMAWAG"
                     % (fasta, bootstrap))

        process_name = 'raxmlHPC.exe'
        time.sleep(5)
        while True:  # 判断 iqtree.exe 是否运行完成
            if check_process_running(process_name):
                print(f"The process {process_name} is running.")
                time.sleep(30)
                continue
            else:
                print(f"The process {process_name} is not running.")
                relevant_path = "."
                included_extensions = ['ex']
                file_names = [fn for fn in os.listdir(relevant_path)
                              if any(fn.endswith(ext) for ext in included_extensions)]
                for i in file_names:
                    shutil.move(i, path)
                break

        self.trigger.emit('Finished!!!')

class Raxml_Form(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.work = WorkThread()

    def setupUi(self, Clustal):
        Clustal.setObjectName("Clustal")
        Clustal.resize(715, 457)
        Clustal.setStyleSheet("background-image: url(D:/Documents/Desktop/bb.png)")
        self.label = QtWidgets.QLabel(Clustal)
        self.label.setGeometry(QtCore.QRect(260, 20, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Clustal)
        self.label_2.setGeometry(QtCore.QRect(30, 80, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_2.setGeometry(QtCore.QRect(30, 120, 221, 31))
        self.textBrowser_2.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_3 = QtWidgets.QLabel(Clustal)
        self.label_3.setGeometry(QtCore.QRect(30, 170, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.textBrowser_3 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_3.setGeometry(QtCore.QRect(30, 210, 221, 31))
        self.textBrowser_3.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.pushButton_2 = QtWidgets.QPushButton(Clustal)
        self.pushButton_2.setGeometry(QtCore.QRect(260, 120, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Clustal)
        self.pushButton_3.setGeometry(QtCore.QRect(260, 210, 71, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.textBrowser = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser.setGeometry(QtCore.QRect(30, 380, 221, 61))
        self.textBrowser.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textBrowser.setObjectName("textBrowser")
        self.label_4 = QtWidgets.QLabel(Clustal)
        self.label_4.setGeometry(QtCore.QRect(60, 340, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(Clustal)
        self.pushButton.setGeometry(QtCore.QRect(600, 400, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.pushButton.setObjectName("pushButton")
        self.label_7 = QtWidgets.QLabel(Clustal)
        self.label_7.setGeometry(QtCore.QRect(350, 80, 271, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.radioButton_4 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_4.setGeometry(QtCore.QRect(520, 160, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.radioButton_4.setObjectName("radioButton_4")
        self.radioButton_5 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_5.setGeometry(QtCore.QRect(350, 190, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.radioButton_5.setObjectName("radioButton_5")
        self.radioButton_3 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_3.setGeometry(QtCore.QRect(350, 160, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton = QtWidgets.QRadioButton(Clustal)
        self.radioButton.setGeometry(QtCore.QRect(350, 130, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton.setFont(font)
        self.radioButton.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.radioButton.setObjectName("radioButton")
        self.radioButton_6 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_6.setGeometry(QtCore.QRect(520, 190, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_6.setFont(font)
        self.radioButton_6.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.radioButton_6.setObjectName("radioButton_6")
        self.radioButton_2 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_2.setGeometry(QtCore.QRect(520, 130, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.radioButton_2.setObjectName("radioButton_2")
        self.textEdit = QtWidgets.QTextEdit(Clustal)
        self.textEdit.setGeometry(QtCore.QRect(30, 300, 221, 31))
        self.textEdit.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textEdit.setObjectName("textEdit")
        self.label_5 = QtWidgets.QLabel(Clustal)
        self.label_5.setGeometry(QtCore.QRect(30, 260, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.label_8 = QtWidgets.QLabel(Clustal)
        self.label_8.setGeometry(QtCore.QRect(350, 260, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.radioButton_11 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_11.setGeometry(QtCore.QRect(350, 360, 351, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_11.setFont(font)
        self.radioButton_11.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.radioButton_11.setObjectName("radioButton_11")
        self.radioButton_7 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_7.setGeometry(QtCore.QRect(350, 300, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_7.setFont(font)
        self.radioButton_7.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.radioButton_7.setObjectName("radioButton_7")
        self.radioButton_8 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_8.setGeometry(QtCore.QRect(520, 300, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_8.setFont(font)
        self.radioButton_8.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.radioButton_8.setObjectName("radioButton_8")
        self.radioButton_9 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_9.setGeometry(QtCore.QRect(350, 330, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_9.setFont(font)
        self.radioButton_9.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.radioButton_9.setObjectName("radioButton_9")
        self.radioButton_10 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_10.setGeometry(QtCore.QRect(520, 330, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_10.setFont(font)
        self.radioButton_10.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.radioButton_10.setObjectName("radioButton_10")
        self.label.raise_()
        self.label_2.raise_()
        self.textBrowser_2.raise_()
        self.label_3.raise_()
        self.textBrowser_3.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        self.textBrowser.raise_()
        self.label_4.raise_()
        self.pushButton.raise_()
        self.label_7.raise_()
        self.radioButton.raise_()
        self.textEdit.raise_()
        self.label_5.raise_()
        self.label_8.raise_()
        self.radioButton_5.raise_()
        self.radioButton_11.raise_()
        self.radioButton_7.raise_()
        self.radioButton_9.raise_()
        self.radioButton_3.raise_()
        self.radioButton_2.raise_()
        self.radioButton_8.raise_()
        self.radioButton_10.raise_()
        self.radioButton_4.raise_()
        self.radioButton_6.raise_()

        self.retranslateUi(Clustal)
        QtCore.QMetaObject.connectSlotsByName(Clustal)

        # button action
        self.pushButton.clicked.connect(self.build_tree)
        self.pushButton_2.clicked.connect(self.read_file1)
        self.pushButton_3.clicked.connect(self.read_file2)

        self.textEdit.setPlaceholderText(" Bootstap: 100")
        self.radioButton.setChecked(True)

    def retranslateUi(self, Clustal):
        _translate = QtCore.QCoreApplication.translate
        Clustal.setWindowTitle(_translate("Clustal", "RaxmlHPC"))
        self.label.setText(_translate("Clustal", "RaxmlHPC"))
        self.label_2.setText(_translate("Clustal", "Input fasta file"))
        self.label_3.setText(_translate("Clustal", "Output fasta file"))
        self.pushButton_2.setText(_translate("Clustal", "Choose"))
        self.pushButton_3.setText(_translate("Clustal", "Choose"))
        self.label_4.setText(_translate("Clustal", "Status"))
        self.pushButton.setText(_translate("Clustal", "Run"))
        self.label_7.setText(_translate("Clustal", "Models of nucleotide substitution"))
        self.radioButton_4.setText(_translate("Clustal", "GTRCAT"))
        self.radioButton_5.setText(_translate("Clustal", "GTRCATI"))
        self.radioButton_3.setText(_translate("Clustal", "GTRGAMMA"))
        self.radioButton.setText(_translate("Clustal", "ASC_GTRCAT"))
        self.radioButton_6.setText(_translate("Clustal", "ASC_GTRGAMMA"))
        self.radioButton_2.setText(_translate("Clustal", "GTRGAMMAI"))
        self.label_5.setText(_translate("Clustal", "Bootstroop value"))
        self.label_8.setText(_translate("Clustal", "Models of amino acids substitution"))
        self.radioButton_11.setText(_translate("Clustal", "PROTGAMMAWAG"))
        self.radioButton_7.setText(_translate("Clustal", "PROTGAMMALGF"))
        self.radioButton_8.setText(_translate("Clustal", "PROTGAMMAILGX"))
        self.radioButton_9.setText(_translate("Clustal", "PROTGTRGAMMA"))
        self.radioButton_10.setText(_translate("Clustal", " PROTGAMMAAUTO"))


    def read_file1(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_2.setText(openfile_name)

    def read_file2(self):
        openfile_name = QtWidgets.QFileDialog.getSaveFileName(self, "choose file", "./")[0]
        print(openfile_name)
        self.textBrowser_3.setText(openfile_name)

    def finished(self, str):
        self.textBrowser.setText(str)

    def build_tree(self):
        try:
            global fasta, out, path, type, bootstrap
            fasta = self.textBrowser_2.toPlainText()
            out = self.textBrowser_3.toPlainText()
            path = os.path.dirname(out)


            try:
                bootstrap = self.textEdit.text()
                if isinstance(bootstrap, int) == True:
                    bootstrap = bootstrap
                else:
                    QMessageBox.critical(self, "error", "Bootstrap value error!")
            except:
                bootstrap = 100

            if any([len(fasta), len(out)]) == False:
                QMessageBox.warning(self, "warning", "Please add correct file path!", QMessageBox.Cancel)
            else:
                self.textBrowser.setText('Running! please wait')
                QApplication.processEvents()  # 逐条打印状态

                if self.radioButton.isChecked():
                    type = 'A'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_2.isChecked():
                    type = 'B'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_3.isChecked():
                    type = 'C'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_4.isChecked():
                    type = 'D'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_5.isChecked():
                    type = 'E'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_6.isChecked():
                    type = 'F'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_7.isChecked():
                    type = 'G'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_8.isChecked():
                    type = 'H'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_9.isChecked():
                    type = 'I'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_10.isChecked():
                    type = 'J'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_11.isChecked():
                    type = 'K'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                else:
                    QMessageBox.critical(self, "error", "Please choose Substitution model!")

        except:
            QMessageBox.critical(self, "error", "Check fasta file format!")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Clustal = QtWidgets.QWidget()
    ui = Raxml_Form()
    ui.setupUi(Clustal)
    Clustal.show()
    sys.exit(app.exec_())
