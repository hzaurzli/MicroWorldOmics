# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MLST.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import subprocess
import os,sys,re
from Bio.Blast.Applications import NcbimakeblastdbCommandline
from Bio.Blast.Applications import NcbiblastnCommandline
from Bio import SeqIO
from itertools import islice
import operator


class winTest(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('My Browser')
        self.setStyleSheet("background-image: url(./logo/backgroundpage.png)")

    """对QDialog类重写，实现一些功能"""

    def closeEvent(self, event):
        """
        重写closeEvent方法，实现dialog窗体关闭时执行一些代码
        :param event: close()触发的事件
        :return: None
        """
        try:
            if os.path.exists(ref_tmp):
                os.remove(ref_tmp)
            else:
                event.ignore()  # 设置正常退出
        except:
            return None  # 设置正常退出


class WorkThread(QThread):
    # 自定义信号对象
    trigger = pyqtSignal(str)

    def __int__(self):
        # 初始化函数
        super(WorkThread, self).__init__()

    def run(self):
        def check_path(pth):
            if not os.path.isdir(pth):
                os.makedirs(pth)

        def is_fasta(filename):
            with open(filename, "r") as handle:
                fasta = SeqIO.parse(handle, "fasta")
                return any(fasta)

        def fasta2dict(fasta_name):
            with open(fasta_name) as fa:
                fa_dict = {}
                for line in fa:
                    # 去除末尾换行符
                    line = line.replace('\n', '')
                    if line.startswith('>'):
                        # 去除 > 号
                        seq_name = line[1:]
                        fa_dict[seq_name] = ''
                    else:
                        # 去除末尾换行符并连接多行序列
                        fa_dict[seq_name] += line.replace('\n', '')
            return fa_dict


        blastdb = out_folder + '/' + 'blastdb'
        query_folder = fasta
        out_folder1 = out_folder + '/' 'out'
        out_folder2 = out_folder + '/' + 'filter'

        check_path(blastdb)
        check_path(out_folder1)
        check_path(out_folder2)

        fasta_dict = fasta2dict(ref)

        global ref_tmp
        ref_tmp = out_folder + '/ref_tmp.fasta'

        with open(ref_tmp,'w') as w:
            for key in fasta_dict:
                line = '>' + key + '::' + str(len(fasta_dict[key])) + '\n' + fasta_dict[key] + '\n'
                w.write(line)
        w.close()

        makedb = NcbimakeblastdbCommandline(path + "/blast-BLAST_VERSION+/bin/makeblastdb.exe",
                                            dbtype='nucl',
                                            input_file = out_folder + '/ref_tmp.fasta',
                                            out=blastdb + '/target')

        makedb()

        evalue = 1e-5
        format = str(6)
        for i in os.listdir(query_folder):
            print(i)
            out = out_folder1 + '/' + os.path.splitext(i)[0] + '.out'
            query = query_folder + '/' + i

            if is_fasta(query) == False:
                QMessageBox.critical(self, "error", "Check fasta file format!")
            else:
                blastn = NcbiblastnCommandline(path + "/blast-BLAST_VERSION+/bin/blastn.exe",
                                               query=query,
                                               db=blastdb + '/target',
                                               outfmt=format,
                                               evalue=float(evalue),
                                               out=out)

                blastn()

        for j in os.listdir(out_folder1):
            blast_info = open(out_folder1 + '/' + os.path.splitext(j)[0] + '.out', "r")
            out_file = open(out_folder2 + '/' + os.path.splitext(j)[0] + '.filter', "w")

            for line in blast_info:
                info = line.strip().split("\t")
                PerCentID = float(info[2])
                if PerCentID == 100.00:
                    AlignLen = int(info[3])
                    Subject = str(info[1])
                    Subject_pattern = re.compile(r"^.*\:(.*)")
                    m = Subject_pattern.search(Subject)
                    SubjectLen = m.group(1)
                    Subject_figure = float(SubjectLen)
                    Percentlen = float(AlignLen / Subject_figure) * 100
                    if Percentlen == 100.00:
                        out_file.write("\t".join(
                            [info[0], info[1], info[2], info[3], info[4], info[5], info[6], info[7], info[8], info[9],
                             info[10],
                             info[11]]) + "\n")

            blast_info.close()
            out_file.close()

        out_file_mlst = open(out_folder + "/mlst_result.txt", "w")

        for i in os.listdir(out_folder2):
            value = out_folder2 + '/' + i
            blast_info = open(value, "r")
            file_name = os.path.splitext(i)[0]

            ST_gene_list = []
            ST_info_dict = {}

            f = open(mlst,'r',encoding='gb18030', errors='ignore')
            count = 0
            for line_ST_old in f:
                count += 1
                if count == 1:
                    lis = line_ST_old.replace("\x00", "").strip().split('\t')[1::]
                else:
                    line_ST = line_ST_old.replace("\x00", "")
                    ST_info = line_ST.strip().split("\t")
                    if ST_info[0] != '':
                        ST_type = str(ST_info[0])
                        ST_str = ":".join(ST_info[1::])
                        key = str(ST_str)
                        ST_info_dict[key] = (ST_type)


            for line in blast_info:
                info = line.strip().split("\t")
                ST_gene = str(info[1])
                ST_gene_list.append(ST_gene)

            # lis = []
            # f = open(gene_folder)
            # for i in f:
            #     i = i.strip()
            #     lis.append(i)

            dic_lis = {}
            for i in lis:
                dic_lis[i] = 0

            for item in ST_gene_list:
                item_info = item.split("::")[0]
                item_info_get = item_info.split("_")[-1]
                gene = '_'.join(item_info.split("_")[:-1])
                dic_lis[gene] = item_info_get

            ST_test = ''
            for key in dic_lis:
                ST_test = ST_test + str(dic_lis[key]) + ':'

            ST_use = str(ST_test.strip(':'))
            if ST_use in ST_info_dict.keys():
                ST_result = ST_info_dict[ST_use]
            else:
                ST_result = 'new'

            out_file_mlst.write(file_name + "\t" + ST_result + "\t" + ST_use + "\n")

            # os.remove(out_folder + '/ref_tmp.fasta')
            self.trigger.emit('Finished!!!')


class MLST_Form(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.work = WorkThread()

    def setupUi(self, Clustal):
        Clustal.setObjectName("Clustal")
        Clustal.resize(702, 467)
        Clustal.setStyleSheet("background-image: url(./logo/backgroundpage.png)")
        self.label = QtWidgets.QLabel(Clustal)
        self.label.setGeometry(QtCore.QRect(240, 10, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Clustal)
        self.label_2.setGeometry(QtCore.QRect(60, 50, 161, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_2.setGeometry(QtCore.QRect(60, 80, 181, 31))
        self.textBrowser_2.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_3 = QtWidgets.QLabel(Clustal)
        self.label_3.setGeometry(QtCore.QRect(60, 130, 161, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.textBrowser_3 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_3.setGeometry(QtCore.QRect(60, 160, 181, 31))
        self.textBrowser_3.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.pushButton_2 = QtWidgets.QPushButton(Clustal)
        self.pushButton_2.setGeometry(QtCore.QRect(260, 80, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Clustal)
        self.pushButton_3.setGeometry(QtCore.QRect(260, 160, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.textBrowser = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser.setGeometry(QtCore.QRect(60, 380, 191, 71))
        self.textBrowser.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser.setObjectName("textBrowser")
        self.label_4 = QtWidgets.QLabel(Clustal)
        self.label_4.setGeometry(QtCore.QRect(100, 340, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(Clustal)
        self.pushButton.setGeometry(QtCore.QRect(590, 410, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-image: url(./logo/white.png)")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_4 = QtWidgets.QPushButton(Clustal)
        self.pushButton_4.setGeometry(QtCore.QRect(350, 360, 331, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_6 = QtWidgets.QLabel(Clustal)
        self.label_6.setGeometry(QtCore.QRect(350, 330, 331, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.tableWidget = QtWidgets.QTableWidget(Clustal)
        self.tableWidget.setGeometry(QtCore.QRect(355, 70, 321, 251))
        self.tableWidget.setStyleSheet("background-image: url(./logo/white.png)")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.label_5 = QtWidgets.QLabel(Clustal)
        self.label_5.setGeometry(QtCore.QRect(60, 200, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.pushButton_5 = QtWidgets.QPushButton(Clustal)
        self.pushButton_5.setGeometry(QtCore.QRect(260, 230, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(Clustal)
        self.pushButton_6.setGeometry(QtCore.QRect(260, 300, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_8 = QtWidgets.QLabel(Clustal)
        self.label_8.setGeometry(QtCore.QRect(60, 270, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.textBrowser_4 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_4.setGeometry(QtCore.QRect(60, 230, 181, 31))
        self.textBrowser_4.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.textBrowser_5 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_5.setGeometry(QtCore.QRect(60, 300, 181, 31))
        self.textBrowser_5.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_5.setObjectName("textBrowser_5")

        self.retranslateUi(Clustal)
        QtCore.QMetaObject.connectSlotsByName(Clustal)

        # button action
        self.pushButton.clicked.connect(self.calculation)
        self.pushButton_2.clicked.connect(self.read_file1)
        self.pushButton_3.clicked.connect(self.read_file2)
        self.pushButton_4.clicked.connect(self.table_read)
        self.pushButton_5.clicked.connect(self.read_file3)
        self.pushButton_6.clicked.connect(self.read_file4)

    def retranslateUi(self, Clustal):
        _translate = QtCore.QCoreApplication.translate
        Clustal.setWindowTitle(_translate("Clustal", "MLST"))
        self.label.setText(_translate("Clustal", "MLST"))
        self.label_2.setText(_translate("Clustal", "Input fasta file"))
        self.label_3.setText(_translate("Clustal", "Output folder"))
        self.pushButton_2.setText(_translate("Clustal", "Choose"))
        self.pushButton_3.setText(_translate("Clustal", "Choose"))
        self.label_4.setText(_translate("Clustal", "Status"))
        self.pushButton.setText(_translate("Clustal", "Run"))
        self.pushButton_4.setText(_translate("Clustal", "Table"))
        self.label_6.setText(_translate("Clustal", "If the program is finished, click \'Table\' to display the result"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Clustal", "Accession"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Clustal", "MLST"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Clustal", "ST_use"))
        self.label_5.setText(_translate("Clustal", "Ref fasta"))
        self.pushButton_5.setText(_translate("Clustal", "Choose"))
        self.pushButton_6.setText(_translate("Clustal", "Choose"))
        self.label_8.setText(_translate("Clustal", "MLST db (TAB)"))


    def read_file1(self):
        openfile_name = QtWidgets.QFileDialog.getExistingDirectory(self, "choose file", "./")
        print(openfile_name)
        self.textBrowser_2.setText(openfile_name)

    def read_file2(self):
        openfile_name = QtWidgets.QFileDialog.getExistingDirectory(self, "choose file", "./")
        print(openfile_name)
        self.textBrowser_3.setText(openfile_name)

    def read_file3(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_4.setText(openfile_name)

    def read_file4(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_5.setText(openfile_name)


    def finished(self, str):
        self.textBrowser.setText(str)

    def calculation(self):
        try:
            global fasta, out_folder, ref, mlst, path, out_file_mlst
            fasta = self.textBrowser_2.toPlainText()
            out_folder = self.textBrowser_3.toPlainText()
            ref = self.textBrowser_4.toPlainText()
            mlst = self.textBrowser_5.toPlainText()

            path = os.path.abspath('.')
            if '\\' in path:
                path = path.strip().split('\\')
                path = '/'.join(path)


            if any([len(fasta), len(out_folder), len(ref), len(mlst)]) == False:
                QMessageBox.warning(self, "warning", "Please add correct file path!", QMessageBox.Cancel)
            else:
                self.textBrowser.setText('Running! please wait')
                QApplication.processEvents()  # 逐条打印状态

                # 启动线程, 运行 run 函数
                self.work.start()
                # 传送信号, 接受 run 函数执行完毕后的信号
                self.work.trigger.connect(self.finished)

        except:
            QMessageBox.critical(self, "error", "Check all files format!")

    def table_read(self):
        try:
            out_file_mlst_path = out_folder + "/mlst_result.txt"
            f = open(out_file_mlst_path)
            print(out_file_mlst_path)
            count = 0
            for line in f:
                count = count + 1

            nrows = int(count)
            print(nrows)
            ncols = 3
            self.tableWidget.setRowCount(nrows)  # 设置行数
            self.tableWidget.setColumnCount(ncols)

            f = open(out_file_mlst_path)
            row_num = 0
            for line in f:
                print(line)
                li = line.strip().split('\t')
                col_num = 0
                for i in li:
                    item = QTableWidgetItem(i)
                    print(item)
                    self.tableWidget.setItem(row_num, col_num, item)
                    print(row_num, col_num)
                    col_num = col_num + 1
                row_num = row_num + 1
        except:
            QMessageBox.critical(self, "error", "Please run program first!!!")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    # Clustal = QtWidgets.QWidget()
    WT = winTest()
    ui = MLST_Form()
    ui.setupUi(WT)
    WT.show()
    sys.exit(app.exec_())