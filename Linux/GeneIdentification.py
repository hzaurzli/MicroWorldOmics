
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GeneIdentification.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import os,sys,re,math
from Bio.Blast.Applications import NcbimakeblastdbCommandline
from Bio.Blast.Applications import NcbiblastnCommandline
from Bio.Blast.Applications import NcbiblastpCommandline
from Bio import SeqIO
import operator

# QtWidgets.QWidget 要与 ui 窗口一致 QWidget 对应 QWidget; QMainWindow 对应 QMainWindow
class winTest(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('My Browser')
        self.setStyleSheet("background-image: url(./logo/backgroundpage.png)")

    """对QDialog类重写，实现一些功能"""

    def closeEvent(self, event):
        """
        重写closeEvent方法，实现dialog窗体关闭时执行一些代码
        :param event: close()触发的事件
        :return: None
        """
        try:
            if os.path.exists(ref_tmp):
                os.remove(ref_tmp)
                try:
                    if os.path.exists(out_tmp):
                        os.remove(out_tmp)
                    else:
                        return None
                except:
                    return None  # 设置正常退出
            else:
                return None
        except:
            return None  # 设置正常退出


class WorkThread(QThread):
    # 自定义信号对象
    trigger = pyqtSignal(str)

    def __int__(self):
        # 初始化函数
        super(WorkThread, self).__init__()

    def run(self):
        def blast_filter(out_folder, coverage):
            ARG_location_dict = {}
            isolates_list = []
            rootdir1 = out_folder
            for i in os.listdir(rootdir1):
                file = i
                blast_info = open(out_folder + '/' + i, "r")
                id = '.'.join(file.split('.')[:-1])
                isolates_list.append(id)
                for line in blast_info:
                    line_info = line.strip().split("\t")
                    Contig_ID_info = line_info[0]
                    ARG_ID = line_info[1].split("::")[0]
                    ARG_len = line_info[1].split("::")[-1]
                    identical_percent = line_info[2]
                    align_length = int(line_info[3])
                    contig_start = int(line_info[6])
                    contig_end = int(line_info[7])
                    ARG_start = int(line_info[8])
                    ARG_end = int(line_info[9])
                    Score = float(line_info[11])
                    F_R = "F"
                    if ARG_end < ARG_start:
                        F_R = "R"
                    align_percent = '%.2f' % (float(align_length) / float(ARG_len) * 100)
                    key_use = (id)
                    if float(align_percent) > coverage:
                        ARG_location_dict.setdefault(key_use, []).append(
                            (ARG_ID, contig_start,
                             contig_end, Score,
                             identical_percent, align_percent,
                             Contig_ID_info, F_R, ARG_len))
                blast_info.close()
            return ARG_location_dict, isolates_list

        def ARG_filter(ARG_location_dict, isolates_list, ident, coverage, over_lap):
            ARG_location_filter_dict = {}
            ARG_list_get = []
            for item in ARG_location_dict.items():
                key_data = item[0]
                ARG_list = item[1]
                ARG_list.sort(key=operator.itemgetter(1))
                start_initial = 0
                ii_keep = 0
                ARG_filter_list = []
                for ii in range(len(ARG_list)):
                    if ARG_list[ii][1] >= start_initial:
                        ARG_filter_list.append((ARG_list[ii][0], ARG_list[ii][4], ARG_list[ii][5], ARG_list[ii][1],
                                                ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7]))
                        start_initial = ARG_list[ii][2]
                        ii_keep = ii
                    elif ARG_list[ii][1] < start_initial and ARG_list[ii][2] > start_initial and float(
                        ARG_list[ii][2] - start_initial) / float(
                        ARG_list[ii][2] - ARG_list[ii][1]) > over_lap / 100 and float(
                        start_initial - ARG_list[ii][1]) / float(ARG_list[ii][8]) < (100 - over_lap) / 100:
                        ARG_filter_list.append((ARG_list[ii][0], ARG_list[ii][4], ARG_list[ii][5], ARG_list[ii][1],
                                                ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7]))
                        start_initial = ARG_list[ii][2]
                        ii_keep = ii
                    else:
                        if ARG_list[ii][3] > ARG_list[ii_keep][3]:
                            sss = (ARG_list[ii_keep][0], ARG_list[ii_keep][4], ARG_list[ii_keep][5], ARG_list[ii][1],
                                   ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7])
                            if sss in ARG_filter_list:
                                ARG_filter_list.remove(sss)
                            ARG_filter_list.append((ARG_list[ii][0], ARG_list[ii][4], ARG_list[ii][5], ARG_list[ii][1],
                                                    ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7]))
                            start_initial = ARG_list[ii][2]
                            ii_keep = ii
                        else:
                            continue
                ARG_filter_list_use = list(set(ARG_filter_list))
                for j in ARG_filter_list_use:
                    if j not in ARG_list_get:
                        ARG_list_get.append(j[0])
                        ARG_list_get = list(set(ARG_list_get))
                ARG_location_filter_dict[key_data] = ARG_filter_list_use
            ARG_location_use_dict = {}
            for kk in ARG_location_filter_dict.items():
                ID_filter = kk[0]
                ARG_list = kk[1]
                for i in ARG_list:
                    if float(i[1]) >= ident and float(
                        i[2]) >= coverage:  # the cutoff values for the identification of a serotyping-determing gene
                        ARG_location_use_dict.setdefault(ID_filter, []).append(i)
            for jj in isolates_list:
                if jj not in ARG_location_use_dict:
                    ARG_location_use_dict[jj] = "Nontypeable"
            return ARG_location_use_dict, ARG_list_get

        def fasta2dict(fasta_name):
            with open(fasta_name) as fa:
                fa_dict = {}
                for line in fa:
                    # 去除末尾换行符
                    line = line.replace('\n', '')
                    if line.startswith('>'):
                        # 去除 > 号
                        seq_name = line[1:]
                        seq_name = seq_name.strip()
                        seq_name = seq_name.split('\t')[0]
                        seq_name = seq_name.split(' ')[0]
                        fa_dict[seq_name] = ''
                    else:
                        # 去除末尾换行符并连接多行序列
                        fa_dict[seq_name] += line.replace('\n', '')
            return fa_dict

        def check_path(pth):
            if not os.path.isdir(pth):
                os.makedirs(pth)

        def is_fasta(filename):
            with open(filename, "r") as handle:
                fasta = SeqIO.parse(handle, "fasta")
                return any(fasta)

        try:
            check_path(blastdb)
            check_path(out_folder + '/out')
            fasta_dict = fasta2dict(ref)

            with open(ref_tmp, 'w') as w:
                for key in fasta_dict:
                    line = '>' + key + '::' + str(len(fasta_dict[key])) + '\n' + fasta_dict[key] + '\n'
                    w.write(line)
            w.close()

            if type == 'A':
                try:
                    makedb = NcbimakeblastdbCommandline(path + "/blast-BLAST_VERSION+/bin/makeblastdb",
                                                        dbtype='nucl',
                                                        input_file=out_folder + '/ref_tmp.fasta',
                                                        out=blastdb + '/target')

                    makedb()

                    for i in os.listdir(fasta):
                        print(i)
                        out = out_folder + '/out/' + os.path.splitext(i)[0] + '.Gene'
                        query = fasta + '/' + i

                        if is_fasta(query) == False:
                            QMessageBox.critical(self, "error", "Check fasta file format!")
                        else:
                            blastn = NcbiblastnCommandline(path + "/blast-BLAST_VERSION+/bin/blastn",
                                                           query=query,
                                                           db=blastdb + '/target',
                                                           outfmt=format,
                                                           evalue=float(evalue),
                                                           out=out)

                            blastn()
                except:
                    QMessageBox.critical(self, "error", "Check fasta file type!")

                ARG_location_dict, isolates_list = blast_filter(out_folder + '/out', coverage)
                ARG_location_use_dict, ARG_list_get = ARG_filter(ARG_location_dict,
                                                                 isolates_list,
                                                                 ident, coverage, over_lap)

                out_file = open(out_folder + "/data_results.out", "w")
                count = 0
                for item in ARG_location_use_dict.items():
                    count += 1
                    isolates_info = item[0]
                    out_file.write(isolates_info + "\t")
                    ARG_list = item[1]
                    ARG_write_list = []
                    ARG_write_dict = {}
                    if ARG_list != 'Nontypeable':
                        for ARG_have in ARG_list:
                            ARG_write_list.append(ARG_have[0])
                            ARG_write_dict.setdefault(ARG_have[0], []).append((ARG_have[1], ARG_have[2]))
                        for n in ARG_list_get:
                            ARG_write = "0"
                            m = 0
                            if n in ARG_write_list:
                                ARG_write_use = ARG_write_dict[n]
                                for i in ARG_write_use:
                                    if float(i[0]) >= ident and float(
                                        i[1]) >= coverage:  # this is the cutoff value for determining an ARG/VF gene
                                        m = m + 1
                                        ARG_write = m
                                        if m > 0:
                                            out_file.write(n + ":" + str(i[0]) + ":" + str(i[1]) + "\t")
                            else:
                                ARG_write = "0"
                        out_file.write("\n")
                    else:
                        out_file.write("NULL" + "\n")
                out_file.close()

            elif type == 'B':
                try:
                    makedb = NcbimakeblastdbCommandline(path + "/blast-BLAST_VERSION+/bin/makeblastdb",
                                                        dbtype='prot',
                                                        input_file=out_folder + '/ref_tmp.fasta',
                                                        out=blastdb + '/target')

                    makedb()

                    for i in os.listdir(fasta):
                        print(i)
                        out = out_folder + '/out/' + os.path.splitext(i)[0] + '.Gene'
                        query = fasta + '/' + i

                        if is_fasta(query) == False:
                            QMessageBox.critical(self, "error", "Check fasta file format!")
                        else:
                            blastp = NcbiblastpCommandline(path + "/blast-BLAST_VERSION+/bin/blastp",
                                                           query=query,
                                                           db=blastdb + '/target',
                                                           outfmt=format,
                                                           evalue=float(evalue),
                                                           out=out)

                            blastp()

                    ARG_location_dict, isolates_list = blast_filter(out_folder + '/out', coverage)
                    ARG_location_use_dict, ARG_list_get = ARG_filter(ARG_location_dict,
                                                                     isolates_list,
                                                                     ident, coverage, over_lap)

                    out_file = open(out_folder + "/data_results.out", "w")
                    count = 0
                    for item in ARG_location_use_dict.items():
                        count += 1
                        isolates_info = item[0]
                        out_file.write(isolates_info + "\t")
                        ARG_list = item[1]
                        ARG_write_list = []
                        ARG_write_dict = {}
                        if ARG_list != 'Nontypeable':
                            for ARG_have in ARG_list:
                                ARG_write_list.append(ARG_have[0])
                                ARG_write_dict.setdefault(ARG_have[0], []).append((ARG_have[1], ARG_have[2]))
                            for n in ARG_list_get:
                                ARG_write = "0"
                                m = 0
                                if n in ARG_write_list:
                                    ARG_write_use = ARG_write_dict[n]
                                    for i in ARG_write_use:
                                        if float(i[0]) >= ident and float(
                                            i[1]) >= coverage:  # this is the cutoff value for determining an ARG/VF gene
                                            m = m + 1
                                            ARG_write = m
                                            if m > 0:
                                                out_file.write(n + ":" + str(i[0]) + ":" + str(i[1]) + "\t")
                                else:
                                    ARG_write = "0"
                            out_file.write("\n")
                        else:
                            out_file.write("NULL" + "\n")
                    out_file.close()

                except:
                    QMessageBox.critical(self, "error", "Check fasta file type!")

            count = 0
            f = open(out_folder + '/data_results.out')
            count = 0
            for i in f:
                count += 1

            f = open(out_folder + '/data_results.out')
            with open(out_folder + '/result_summary.out', 'w') as w:
                c1 = 0
                for i in f:
                    c1 += 1
                    id = i.strip().split('\t')[0]
                    gene = i.strip().split('\t')[1::]
                    print(gene)
                    c2 = 0
                    for j in gene:
                        c2 += 1
                        if c1 == count and c2 == len(gene):
                            line = id + '\t' + j
                            w.write(line)
                        else:
                            line = id + '\t' + j + '\n'
                            w.write(line)
            w.close()

            self.trigger.emit('Finished!!!' + '\n' + 'data_results.out and result_summary.out are your results')

        except Exception as ex:
            self.trigger.emit('Some errors have occurred, %s!' % ex)


class GeneIdentification_Form(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.work = WorkThread()

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(790, 584)
        Form.setWindowIcon(QIcon("./logo/logo.ico"))
        Form.setStyleSheet("background-image: url(./logo/green_back.png);")
        self.gridLayout_2 = QtWidgets.QGridLayout(Form)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 4, 0, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 23, 2, 1, 1)
        self.label_10 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_10.setObjectName("label_10")
        self.gridLayout.addWidget(self.label_10, 5, 0, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_5.sizePolicy().hasHeightForWidth())
        self.pushButton_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout.addWidget(self.pushButton_5, 7, 0, 1, 1)
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setStyleSheet("background-image: url(./logo/white.png)")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.gridLayout.addWidget(self.tableWidget, 3, 2, 16, 1)
        self.textEdit_2 = QtWidgets.QTextEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit_2.sizePolicy().hasHeightForWidth())
        self.textEdit_2.setSizePolicy(sizePolicy)
        self.textEdit_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textEdit_2.setStyleSheet("background-image: url(./logo/white.png)")
        self.textEdit_2.setObjectName("textEdit_2")
        self.gridLayout.addWidget(self.textEdit_2, 11, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 2, 1, 1)
        self.label_8 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setItalic(True)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 8, 0, 1, 1)
        self.textEdit_3 = QtWidgets.QTextEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit_3.sizePolicy().hasHeightForWidth())
        self.textEdit_3.setSizePolicy(sizePolicy)
        self.textEdit_3.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textEdit_3.setStyleSheet("background-image: url(./logo/white.png)")
        self.textEdit_3.setObjectName("textEdit_3")
        self.gridLayout.addWidget(self.textEdit_3, 11, 1, 1, 1)
        self.pushButton = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-image: url(./logo/white.png)")
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 36, 0, 2, 3)
        self.label_7 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 1, 1, 1, 1)
        self.label = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 3)
        self.radioButton = QtWidgets.QRadioButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.radioButton.sizePolicy().hasHeightForWidth())
        self.radioButton.setSizePolicy(sizePolicy)
        self.radioButton.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton.setFont(font)
        self.radioButton.setStyleSheet("background-image: url(./logo/white.png);")
        self.radioButton.setObjectName("radioButton")
        self.gridLayout.addWidget(self.radioButton, 15, 0, 1, 1)
        self.textBrowser_4 = QtWidgets.QTextBrowser(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser_4.sizePolicy().hasHeightForWidth())
        self.textBrowser_4.setSizePolicy(sizePolicy)
        self.textBrowser_4.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textBrowser_4.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.gridLayout.addWidget(self.textBrowser_4, 6, 0, 1, 1)
        self.textBrowser_3 = QtWidgets.QTextBrowser(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser_3.sizePolicy().hasHeightForWidth())
        self.textBrowser_3.setSizePolicy(sizePolicy)
        self.textBrowser_3.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textBrowser_3.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.gridLayout.addWidget(self.textBrowser_3, 3, 1, 1, 1)
        self.label_12 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setItalic(True)
        self.label_12.setFont(font)
        self.label_12.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_12.setObjectName("label_12")
        self.gridLayout.addWidget(self.label_12, 5, 1, 1, 1)
        self.label_9 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setItalic(True)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 8, 1, 1, 1)
        self.label_13 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.label_13.setFont(font)
        self.label_13.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_13.setObjectName("label_13")
        self.gridLayout.addWidget(self.label_13, 22, 2, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 4, 1, 1, 1)
        self.textBrowser_2 = QtWidgets.QTextBrowser(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser_2.sizePolicy().hasHeightForWidth())
        self.textBrowser_2.setSizePolicy(sizePolicy)
        self.textBrowser_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textBrowser_2.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.gridLayout.addWidget(self.textBrowser_2, 3, 0, 1, 1)
        self.textEdit = QtWidgets.QTextEdit(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit.sizePolicy().hasHeightForWidth())
        self.textEdit.setSizePolicy(sizePolicy)
        self.textEdit.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textEdit.setStyleSheet("background-image: url(./logo/white.png)")
        self.textEdit.setObjectName("textEdit")
        self.gridLayout.addWidget(self.textEdit, 6, 1, 2, 1)
        self.label_6 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 1, 0, 1, 1)
        self.radioButton_2 = QtWidgets.QRadioButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.radioButton_2.sizePolicy().hasHeightForWidth())
        self.radioButton_2.setSizePolicy(sizePolicy)
        self.radioButton_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setStyleSheet("background-image: url(./logo/white.png);")
        self.radioButton_2.setObjectName("radioButton_2")
        self.gridLayout.addWidget(self.radioButton_2, 15, 1, 1, 1)
        self.label_11 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_11.setFont(font)
        self.label_11.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_11.setObjectName("label_11")
        self.gridLayout.addWidget(self.label_11, 14, 0, 1, 2)
        self.textBrowser = QtWidgets.QTextBrowser(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser.sizePolicy().hasHeightForWidth())
        self.textBrowser.setSizePolicy(sizePolicy)
        self.textBrowser.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textBrowser.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout.addWidget(self.textBrowser, 23, 0, 1, 2)
        self.label_4 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 22, 0, 1, 2)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        # button action
        self.pushButton.clicked.connect(self.calculation)
        self.pushButton_2.clicked.connect(self.read_file1)
        self.pushButton_3.clicked.connect(self.read_file2)
        self.pushButton_4.clicked.connect(self.table_read)
        self.pushButton_5.clicked.connect(self.read_file3)

        ## default
        self.textBrowser_2.setPlaceholderText("D:/fa_input")
        self.textBrowser_3.setPlaceholderText("D:/output")
        self.textBrowser_4.setPlaceholderText("D:/input/reference.fa")
        self.textEdit.setPlaceholderText(" Default: 80 (%)")
        self.textEdit_2.setPlaceholderText(" Default: 90 (%)")
        self.textEdit_3.setPlaceholderText(" Default: 90 (%)")
        self.radioButton.setChecked(True)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Gene identification"))
        self.pushButton_2.setText(_translate("Form", "Choose"))
        self.pushButton_4.setText(_translate("Form", "Table"))
        self.label_10.setText(_translate("Form", "Ref fasta file"))
        self.pushButton_5.setText(_translate("Form", "Choose"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Genome_ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Gene_ID"))
        self.label_2.setText(_translate("Form", "Result table"))
        self.label_8.setText(_translate("Form", "Identification (%)"))
        self.pushButton.setText(_translate("Form", "Run"))
        self.label_7.setText(_translate("Form", "Output folder"))
        self.label.setText(_translate("Form", "Gene identification"))
        self.radioButton.setText(_translate("Form", "Nucleic mode"))
        self.label_12.setText(_translate("Form", "Same position coverage (%)"))
        self.label_9.setText(_translate("Form", "Gene coverage (%)"))
        self.label_13.setText(_translate("Form", "If the program is finished, click \'Table\' to display the result"))
        self.pushButton_3.setText(_translate("Form", "Choose"))
        self.label_6.setText(_translate("Form", "Input folder (fasta)"))
        self.radioButton_2.setText(_translate("Form", "Protein mode"))
        self.label_11.setText(_translate("Form", "Blast mode"))
        self.label_4.setText(_translate("Form", "Status"))


    def read_file1(self):
        openfile_name = QtWidgets.QFileDialog.getExistingDirectory(self, "choose file", "./")
        print(openfile_name)
        self.textBrowser_2.setText(openfile_name)

    def read_file2(self):
        openfile_name = QtWidgets.QFileDialog.getExistingDirectory(self, "choose file", "./")
        print(openfile_name)
        self.textBrowser_3.setText(openfile_name)

    def read_file3(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_4.setText(openfile_name)


    def finished(self, str):
        self.textBrowser.setText(str)


    def calculation(self):
        try:
            global fasta, out_folder, ref
            global blastdb, ref_tmp, evalue, format
            global path, type, ident, coverage, over_lap

            fasta = self.textBrowser_2.toPlainText()
            out_folder = self.textBrowser_3.toPlainText()
            ref = self.textBrowser_4.toPlainText()

            blastdb = out_folder + '/blastdb'
            ref_tmp = out_folder + '/ref_tmp.fasta'

            evalue = 1e-5
            format = str(6)

            path = os.path.abspath('.')
            if '\\' in path:
                path = path.strip().split('\\')
                path = '/'.join(path)

            if 0 in [len(fasta), len(out_folder), len(ref)]:
                QMessageBox.warning(self, "warning", "Please add correct file path!", QMessageBox.Cancel)
            else:
                try:
                    self.textBrowser.setText(
                        'Running! please wait' + '\n' + 'If no response,never close window!!!')
                    QApplication.processEvents()  # 逐条打印状态

                    ident = str(self.textEdit_2.toPlainText())
                    if ident == '':
                        ident = 80
                    else:
                        ident = float(ident)

                    coverage = str(self.textEdit_3.toPlainText())
                    if coverage == '':
                        coverage = 90
                    else:
                        coverage = float(coverage)

                    over_lap = str(self.textEdit.toPlainText())
                    if over_lap == '':
                        over_lap = 80
                    else:
                        over_lap = float(over_lap)

                    if self.radioButton.isChecked():
                        type = 'A'

                        # 启动线程, 运行 run 函数
                        self.work.start()
                        # 传送信号, 接受 run 函数执行完毕后的信号
                        self.work.trigger.connect(self.finished)

                    elif self.radioButton_2.isChecked():
                        type = 'B'

                        # 启动线程, 运行 run 函数
                        self.work.start()
                        # 传送信号, 接受 run 函数执行完毕后的信号
                        self.work.trigger.connect(self.finished)

                except:
                    QMessageBox.critical(self, "error", "Check parameters value!")

        except:
            QMessageBox.critical(self, "error", "Please run program first!!!")

    def table_read(self):
        try:
            global out_tmp

            result_file = out_folder + '/result_summary.out'
            out_p = os.path.dirname(result_file)
            out_tmp = out_p + '/result_summary.out'

            f = open(out_tmp)
            count = 0
            for line in f:
                count = count + 1

            nrows = int(count)
            print(nrows)
            ncols = 2
            self.tableWidget.setRowCount(nrows)  # 设置行数
            self.tableWidget.setColumnCount(ncols)

            f = open(out_tmp)
            row_num = 0
            for line in f:
                print(line)
                li = line.strip().split('\t')
                col_num = 0
                for i in li:
                    item = QTableWidgetItem(i)
                    print(item)
                    self.tableWidget.setItem(row_num, col_num, item)
                    print(row_num, col_num)
                    col_num = col_num + 1
                row_num = row_num + 1

        except:
            QMessageBox.critical(self, "error", "Please run program first!!!")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    WT = QtWidgets.QWidget()
    WT = winTest()
    ui = GeneIdentification_Form()
    ui.setupUi(WT)
    WT.show()
    sys.exit(app.exec_())