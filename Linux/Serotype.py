# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Serotype.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import os,sys,re,math
from Bio.Blast.Applications import NcbimakeblastdbCommandline
from Bio.Blast.Applications import NcbiblastnCommandline
from Bio import SeqIO
from Bio import AlignIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio import pairwise2
from Bio.Seq import translate
import operator


# QtWidgets.QWidget 要与 ui 窗口一致 QWidget 对应 QWidget; QMainWindow 对应 QMainWindow
class winTest(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('My Browser')
        self.setStyleSheet("background-image: url(./logo/backgroundpage.png)")

    """对QDialog类重写，实现一些功能"""

    def closeEvent(self, event):
        """
        重写closeEvent方法，实现dialog窗体关闭时执行一些代码
        :param event: close()触发的事件
        :return: None
        """
        try:
            if os.path.exists(ref_tmp):
                os.remove(ref_tmp)
                try:
                    if os.path.exists(out_tmp):
                        os.remove(out_tmp)
                        try:
                            if os.path.exists(ref_tmp_s):
                                os.remove(ref_tmp_s)
                            else:
                                return None
                        except:
                            return None  # 设置正常退出
                    else:
                        try:
                            if os.path.exists(ref_tmp_s):
                                os.remove(ref_tmp_s)
                            else:
                                return None
                        except:
                            return None  # 设置正常退出
                except:
                    return None  # 设置正常退出
            else:
                return None  # 设置正常退出
        except:
            return None  # 设置正常退出


class WorkThread(QThread):
    # 自定义信号对象
    trigger = pyqtSignal(str)

    def __int__(self):
        # 初始化函数
        super(WorkThread, self).__init__()

    def run(self):
        try:
            def is_fasta(filename):
                with open(filename, "r") as handle:
                    fasta = SeqIO.parse(handle, "fasta")
                    return any(fasta)

            def check_path(pth):
                if not os.path.isdir(pth):
                    os.makedirs(pth)

            def blast_filter(out_folder):
                ARG_location_dict = {}
                isolates_list = []
                rootdir1 = out_folder
                for i in os.listdir(rootdir1):
                    file = i
                    blast_info = open(out_folder + '/' + i, "r")
                    id = '.'.join(file.split('.')[:-1])
                    isolates_list.append(id)
                    for line in blast_info:
                        line_info = line.strip().split("\t")
                        Contig_ID_info = line_info[0]
                        ARG_ID = line_info[1].split("::")[0]
                        ARG_len = line_info[1].split("::")[-1]
                        identical_percent = line_info[2]
                        align_length = int(line_info[3])
                        contig_start = int(line_info[6])
                        contig_end = int(line_info[7])
                        ARG_start = int(line_info[8])
                        ARG_end = int(line_info[9])
                        Score = float(line_info[11])
                        F_R = "F"
                        if ARG_end < ARG_start:
                            F_R = "R"
                        align_percent = '%.2f' % (float(align_length) / float(ARG_len) * 100)
                        key_use = (id)
                        if float(align_percent) > 50.00:
                            ARG_location_dict.setdefault(key_use, []).append(
                                (ARG_ID, contig_start,
                                 contig_end, Score,
                                 identical_percent, align_percent,
                                 Contig_ID_info, F_R, ARG_len))
                    blast_info.close()
                return ARG_location_dict, isolates_list

            def ARG_filter(ARG_location_dict, isolates_list):
                ARG_location_filter_dict = {}
                ARG_list_get = []
                for item in ARG_location_dict.items():
                    key_data = item[0]
                    ARG_list = item[1]
                    ARG_list.sort(key=operator.itemgetter(1))
                    start_initial = 0
                    ii_keep = 0
                    ARG_filter_list = []
                    for ii in range(len(ARG_list)):
                        if ARG_list[ii][1] >= start_initial:
                            ARG_filter_list.append((ARG_list[ii][0], ARG_list[ii][4], ARG_list[ii][5], ARG_list[ii][1],
                                                    ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7]))
                            start_initial = ARG_list[ii][2]
                            ii_keep = ii
                        elif ARG_list[ii][1] < start_initial and ARG_list[ii][2] > start_initial and float(
                            ARG_list[ii][2] - start_initial) / float(ARG_list[ii][2] - ARG_list[ii][1]) > 0.8 and float(
                            start_initial - ARG_list[ii][1]) / float(ARG_list[ii][8]) < 0.2:
                            ARG_filter_list.append((ARG_list[ii][0], ARG_list[ii][4], ARG_list[ii][5], ARG_list[ii][1],
                                                    ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7]))
                            start_initial = ARG_list[ii][2]
                            ii_keep = ii
                        else:
                            if ARG_list[ii][3] > ARG_list[ii_keep][3]:
                                sss = (ARG_list[ii_keep][0], ARG_list[ii_keep][4], ARG_list[ii_keep][5], ARG_list[ii][1],
                                       ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7])
                                if sss in ARG_filter_list:
                                    ARG_filter_list.remove(sss)
                                ARG_filter_list.append((ARG_list[ii][0], ARG_list[ii][4], ARG_list[ii][5], ARG_list[ii][1],
                                                        ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7]))
                                start_initial = ARG_list[ii][2]
                                ii_keep = ii
                            else:
                                continue
                    ARG_filter_list_use = list(set(ARG_filter_list))
                    for j in ARG_filter_list_use:
                        if j not in ARG_list_get:
                            ARG_list_get.append(j[0])
                            ARG_list_get = list(set(ARG_list_get))
                    ARG_location_filter_dict[key_data] = ARG_filter_list_use
                ARG_location_use_dict = {}
                for kk in ARG_location_filter_dict.items():
                    ID_filter = kk[0]
                    ARG_list = kk[1]
                    for i in ARG_list:
                        if float(i[1]) >= 90.00 and float(
                            i[2]) >= 90.00:  # the cutoff values for the identification of a serotyping-determing gene
                            ARG_location_use_dict.setdefault(ID_filter, []).append(i)
                for jj in isolates_list:
                    if jj not in ARG_location_use_dict:
                        ARG_location_use_dict[jj] = "Nontypeable"
                return ARG_location_use_dict, ARG_list_get

            def fasta2dict(fasta_name):
                with open(fasta_name) as fa:
                    fa_dict = {}
                    for line in fa:
                        # 去除末尾换行符
                        line = line.replace('\n', '')
                        if line.startswith('>'):
                            # 去除 > 号
                            seq_name = line[1:]
                            seq_name = seq_name.strip()
                            seq_name = seq_name.split('\t')[0]
                            seq_name = seq_name.split(' ')[0]
                            fa_dict[seq_name] = ''
                        else:
                            # 去除末尾换行符并连接多行序列
                            fa_dict[seq_name] += line.replace('\n', '')
                return fa_dict

            if type == 'A':
                try:
                    if is_fasta(ref) == False:
                        QMessageBox.critical(self, "error", "Check fasta file format!")
                    else:
                        check_path(blastdb)
                        check_path(out_folder + '/out')
                        fasta_dict = fasta2dict(ref)

                        with open(ref_tmp, 'w') as w:
                            for key in fasta_dict:
                                line = '>' + key + '::' + str(len(fasta_dict[key])) + '\n' + fasta_dict[key] + '\n'
                                w.write(line)
                        w.close()

                        makedb = NcbimakeblastdbCommandline(path + "/blast-BLAST_VERSION+/bin/makeblastdb",
                                                            dbtype='nucl',
                                                            input_file=out_folder + '/ref_tmp.fasta',
                                                            out=blastdb + '/target')

                        makedb()
                except:
                    QMessageBox.critical(self, "error", "Check fasta file format!")

                for i in os.listdir(fasta):
                    print(i)
                    out = out_folder + '/out/' + os.path.splitext(i)[0] + '.Sero'
                    query = fasta + '/' + i

                    try:
                        if is_fasta(query) == False:
                            QMessageBox.critical(self, "error", "Check fasta file format!")
                        else:
                            blastn = NcbiblastnCommandline(path + "/blast-BLAST_VERSION+/bin/blastn",
                                                           query=query,
                                                           db=blastdb + '/target',
                                                           outfmt=format,
                                                           evalue=float(evalue),
                                                           out=out)

                            blastn()
                    except:
                        QMessageBox.critical(self, "error", "Check fasta file format!")
                #########################################

                ARG_location_dict, isolates_list = blast_filter(out_folder + '/out')

                ARG_location_use_dict, ARG_list_get = ARG_filter(ARG_location_dict, isolates_list)

                out_file = open(file, "w")
                out_file.write("Genome_ID" + "\t" + "Serotype" + "\n")
                count = 0
                for i in isolates_list:
                    Serotype_results_info = ARG_location_use_dict[i]
                    count += 1
                    if Serotype_results_info == "Nontypeable":
                        if count == len(isolates_list):
                            out_file.write(i + "\t" + "Nontypeable")
                        else:
                            out_file.write(i + "\t" + "Nontypeable" + "\n")
                    elif len(Serotype_results_info) == 1:
                        if count == len(isolates_list):
                            out_file.write(i + "\t" + Serotype_results_info[0][0])
                        else:
                            out_file.write(i + "\t" + Serotype_results_info[0][0] + "\n")
                    else:
                        sen_type = []
                        for k in range(0, len(Serotype_results_info)):
                            sen_type.append(Serotype_results_info[k][0])
                        sen_type.sort()
                        type_sero = 'Uncertainty:' + '&'.join(sen_type)
                        print(type_sero)
                        if count == len(isolates_list):
                            out_file.write(i + "\t" + type_sero)
                        else:
                            out_file.write(i + "\t" + type_sero + "\n")
                out_file.close()


            elif type == 'B':
                if is_fasta(ref) == False:
                    QMessageBox.critical(self, "error", "Check fasta file format!")
                else:
                    check_path(blastdb)
                    check_path(blastdb_s)
                    check_path(out_folder + '/out')
                    check_path(out_folder + '/out_exact')

                    profile = open(profile_file)
                    fasta_dict = fasta2dict(ref)
                    fasta_dict_s = fasta2dict(ref_s)

                    with open(ref_tmp, 'w') as w:
                        for key in fasta_dict:
                            line = '>' + key + '::' + str(len(fasta_dict[key])) + '\n' + fasta_dict[key] + '\n'
                            w.write(line)
                    w.close()

                    makedb = NcbimakeblastdbCommandline(path + "/blast-BLAST_VERSION+/bin/makeblastdb",
                                                        dbtype='nucl',
                                                        input_file=out_folder + '/ref_tmp.fasta',
                                                        out=blastdb + '/target')

                    makedb()

                for i in os.listdir(fasta):
                    print(i)
                    out = out_folder + '/out/' + os.path.splitext(i)[0] + '.Sero'
                    query = fasta + '/' + i

                    if is_fasta(query) == False:
                        QMessageBox.critical(self, "error", "Check fasta file format!")
                    else:
                        blastn = NcbiblastnCommandline(path + "/blast-BLAST_VERSION+/bin/blastn",
                                                       query=query,
                                                       db=blastdb + '/target',
                                                       outfmt=format,
                                                       evalue=float(evalue),
                                                       out=out)

                        blastn()
                #########################################

                ARG_location_dict, isolates_list = blast_filter(out_folder + '/out')

                ARG_location_use_dict, ARG_list_get = ARG_filter(ARG_location_dict, isolates_list)

                out_file = open(file, "w")
                out_file.write("Genome_ID" + "\t" + "Serotype" + "\n")
                count = 0
                for i in isolates_list:
                    Serotype_results_info = ARG_location_use_dict[i]
                    count += 1
                    if Serotype_results_info == "Nontypeable":
                        if count == len(isolates_list):
                            out_file.write(i + "\t" + "Nontypeable")
                        else:
                            out_file.write(i + "\t" + "Nontypeable" + "\n")
                    elif len(Serotype_results_info) == 1:
                        if count == len(isolates_list):
                            out_file.write(i + "\t" + Serotype_results_info[0][0])
                        else:
                            out_file.write(i + "\t" + Serotype_results_info[0][0] + "\n")
                    else:
                        sen_type = []
                        for k in range(0, len(Serotype_results_info)):
                            sen_type.append(Serotype_results_info[k][0])
                        sen_type.sort()
                        type_sero = 'Uncertainty:' + '&'.join(sen_type)
                        print(type_sero)
                        if count == len(isolates_list):
                            out_file.write(i + "\t" + type_sero)
                        else:
                            out_file.write(i + "\t" + type_sero + "\n")
                out_file.close()

                ##############################
                dic_fa = {}
                f = open(file)
                next(f)
                for i in f:
                    i = i.strip().split('\t')
                    dic_fa[i[0]] = i[1]

                with open(ref_tmp_s, 'w') as w:
                    for key in fasta_dict_s:
                        line = '>' + key + '::' + str(len(fasta_dict_s[key])) + '\n' + fasta_dict_s[key] + '\n'
                        w.write(line)
                w.close()

                makedb = NcbimakeblastdbCommandline(path + "/blast-BLAST_VERSION+/bin/makeblastdb",
                                                    dbtype='nucl',
                                                    input_file=out_folder + '/ref_tmp_s.fasta',
                                                    out=blastdb_s + '/target_s')

                makedb()

                fasta_file = []
                for j in os.listdir(fasta):
                    fasta_file.append(j)

                dic_profile = {}
                dic_refid = {}
                dic_group = {}
                next(profile)
                try:
                    for i in profile:
                        i = i.strip().split(',')
                        if i[4] in dic_profile.keys():
                            dic_profile[i[0]].append(i[1])
                            dic_profile[i[0]].append(i[2])
                            dic_profile[i[0]].append(i[3])
                            dic_profile[i[0]].append(i[4])
                        else:
                            dic_profile[i[0]] = []
                            dic_profile[i[0]].append(i[1])
                            dic_profile[i[0]].append(i[2])
                            dic_profile[i[0]].append(i[3])
                            dic_profile[i[0]].append(i[4])
                        if i[4] in dic_refid.keys():
                            dic_refid[i[4]].append(i[0])
                        else:
                            dic_refid[i[4]] = []
                            dic_refid[i[4]].append(i[0])
                        if i[5] in dic_group.keys():
                            dic_group[i[5]].append(i[0])
                        else:
                            dic_group[i[5]] = []
                            dic_group[i[5]].append(i[0])
                except:
                    QMessageBox.critical(self, "error", "Check profile file format (csv)!")

                for key in dic_fa:
                    if 'Uncertainty:' not in dic_fa[key]:
                        for n in dic_group:
                            if any(element == dic_fa[key] for element in dic_group[n]):
                                out = out_folder + '/out_exact/' + key + '.Sero'
                                for j in fasta_file:
                                    if key in str(j):
                                        query = fasta + '/' + j
                                        if is_fasta(query) == False:
                                            QMessageBox.critical(self, "error", "Check fasta file format!")
                                        else:
                                            blastn = NcbiblastnCommandline(path + "/blast-BLAST_VERSION+/bin/blastn",
                                                                           query=query,
                                                                           db=blastdb_s + '/target_s',
                                                                           outfmt=format,
                                                                           evalue=float(evalue),
                                                                           out=out)

                                            blastn()
                    else:
                        lis_type = dic_fa[key].split('ty:')[1].split('&')
                        if any(lis_type.sort() == dic_group[element].sort() for element in dic_group):
                            out = out_folder + '/out_exact/' + key + '.Sero'
                            for j in fasta_file:
                                if key in str(j):
                                    query = fasta + '/' + j
                                    if is_fasta(query) == False:
                                        QMessageBox.critical(self, "error", "Check fasta file format!")
                                    else:
                                        blastn = NcbiblastnCommandline(path + "/blast-BLAST_VERSION+/bin/blastn",
                                                                       query=query,
                                                                       db=blastdb_s + '/target_s',
                                                                       outfmt=format,
                                                                       evalue=float(evalue),
                                                                       out=out)

                                        blastn()

                ARG_location_dict, isolates_list = blast_filter(out_folder + '/out_exact')
                ARG_location_use_dict, ARG_list_get = ARG_filter(ARG_location_dict, isolates_list)

                new = open(out_folder + '/Serotype_results.out')
                dic_new = {}
                next(new)
                for i in new:
                    i = i.strip().split('\t')
                    dic_new[i[0]] = i[1]

                print(ARG_location_use_dict)
                for i in ARG_location_use_dict:
                    if 'Uncertainty:' not in dic_new[i]:
                        if ARG_location_use_dict[i][0][6] == 'F':
                            start = ARG_location_use_dict[i][0][3]
                            end = ARG_location_use_dict[i][0][4]
                            for j in fasta_file:
                                if i in j:
                                    seq_dict = fasta2dict(fasta + '/' + j)
                                    for m in seq_dict:
                                        if ARG_location_use_dict[i][0][5] in m:
                                            seq = seq_dict[m][int(start) - 1: int(end)]
                                            frame_list = []
                                            for frame_start in range(3):
                                                frame = translate(seq[frame_start:], table=11)
                                                Non_count = frame.count("*")
                                                frame_list.append((Non_count, frame))
                                            frame_list_use = sorted(frame_list)
                                            gene_protein = frame_list_use[0][1]

                                            for n in dic_group:
                                                if any(element == dic_new[i] for element in dic_group[n]):
                                                    for key in fasta_dict_s:
                                                        for new_sero in dic_group[n]:
                                                            if dic_profile[new_sero][3] in key:
                                                                frame_list = []
                                                                for frame_start in range(3):
                                                                    frame = translate(Seq(fasta_dict_s[key]), table=11)
                                                                    Non_count = frame.count("*")
                                                                    frame_list.append((Non_count, frame))
                                                                frame_list_use = sorted(frame_list)
                                                                gene_protein_s = frame_list_use[0][1]

                                                                num = int(dic_profile[new_sero][1]) - int(
                                                                    dic_profile[new_sero][0])

                                                                if len(gene_protein_s) > len(gene_protein):
                                                                    alignments = pairwise2.align.localxs(gene_protein_s,
                                                                                                         gene_protein,
                                                                                                         -1e9,
                                                                                                         -1e9)
                                                                    if len(alignments) == 1:
                                                                        for alignment in alignments:
                                                                            sero_seq = alignment.seqB[int(
                                                                                dic_profile[new_sero][0]) - 1: int(
                                                                                dic_profile[new_sero][1])]
                                                                            if sero_seq == dic_profile[new_sero][2]:
                                                                                print(i + ';' + new_sero)
                                                                                print('------')
                                                                                dic_new[i] = new_sero


                                                                elif len(gene_protein_s) <= len(gene_protein):
                                                                    alignments = pairwise2.align.localxs(gene_protein_s,
                                                                                                         gene_protein,
                                                                                                         -1e9,
                                                                                                         -1e9)
                                                                    if len(alignments) == 1:
                                                                        for alignment in alignments:
                                                                            gene_protein_a = alignment.seqB[
                                                                                             int(alignment.start): int(
                                                                                                 alignment.end)]
                                                                    aligns = pairwise2.align.localxs(gene_protein_s,
                                                                                                     gene_protein_a,
                                                                                                     -1e9,
                                                                                                     -1e9)

                                                                    if len(aligns) == 1:
                                                                        for align in aligns:
                                                                            sero_seq = align.seqB[int(
                                                                                dic_profile[new_sero][0]) - 1: int(
                                                                                dic_profile[new_sero][1])]
                                                                            if sero_seq == dic_profile[new_sero][2]:
                                                                                print(i + ';' + new_sero)
                                                                                print('------')
                                                                                dic_new[i] = new_sero

                        elif ARG_location_use_dict[i][0][6] == 'R':
                            start = ARG_location_use_dict[i][0][3]
                            end = ARG_location_use_dict[i][0][4]
                            for j in fasta_file:
                                if i in j:
                                    seq_dict = fasta2dict(fasta + '/' + j)
                                    for m in seq_dict:
                                        if ARG_location_use_dict[i][0][5] in m:
                                            gene_seq_ori = seq_dict[m][int(start) - 1: int(end)]
                                            seq = Seq(gene_seq_ori).reverse_complement()

                                            frame_list = []
                                            for frame_start in range(3):
                                                frame = translate(seq[frame_start:], table=11)
                                                Non_count = frame.count("*")
                                                frame_list.append((Non_count, frame))
                                            frame_list_use = sorted(frame_list)
                                            gene_protein = frame_list_use[0][1]
                                            for n in dic_group:
                                                if any(element == dic_new[i] for element in dic_group[n]):
                                                    for key in fasta_dict_s:
                                                        for new_sero in dic_group[n]:
                                                            if dic_profile[new_sero][3] in key:
                                                                frame_list = []
                                                                for frame_start in range(3):
                                                                    frame = translate(Seq(fasta_dict_s[key]), table=11)
                                                                    Non_count = frame.count("*")
                                                                    frame_list.append((Non_count, frame))
                                                                frame_list_use = sorted(frame_list)
                                                                gene_protein_s = frame_list_use[0][1]

                                                                num = int(dic_profile[new_sero][1]) - int(
                                                                    dic_profile[new_sero][0])

                                                                if len(gene_protein_s) > len(gene_protein):
                                                                    alignments = pairwise2.align.localxs(gene_protein_s,
                                                                                                         gene_protein,
                                                                                                         -1e9, -1e9)
                                                                    if len(alignments) == 1:
                                                                        for alignment in alignments:
                                                                            sero_seq = alignment.seqB[
                                                                                       int(dic_profile[new_sero][
                                                                                               0]) - 1: int(
                                                                                           dic_profile[new_sero][1])]
                                                                            if sero_seq == dic_profile[new_sero][2]:
                                                                                print(i + ';' + new_sero)
                                                                                print('------')
                                                                                dic_new[i] = new_sero


                                                                elif len(gene_protein_s) <= len(gene_protein):
                                                                    alignments = pairwise2.align.localxs(gene_protein_s,
                                                                                                         gene_protein,
                                                                                                         -1e9, -1e9)
                                                                    if len(alignments) == 1:
                                                                        for alignment in alignments:
                                                                            gene_protein_a = alignment.seqB[
                                                                                             int(alignment.start): int(
                                                                                                 alignment.end)]
                                                                    aligns = pairwise2.align.localxs(gene_protein_s,
                                                                                                     gene_protein_a,
                                                                                                     -1e9,
                                                                                                     -1e9)

                                                                    if len(aligns) == 1:
                                                                        for align in aligns:
                                                                            sero_seq = align.seqB[int(
                                                                                dic_profile[new_sero][0]) - 1: int(
                                                                                dic_profile[new_sero][1])]
                                                                            if sero_seq == dic_profile[new_sero][2]:
                                                                                print(i + ';' + new_sero)
                                                                                print('------')
                                                                                dic_new[i] = new_sero

                    else:
                        lis_type = dic_new[i].split('ty:')[1].split('&')
                        if any(lis_type.sort() == dic_group[element].sort() for element in dic_group):
                            if ARG_location_use_dict[i][0][6] == 'F':
                                start = ARG_location_use_dict[i][0][3]
                                end = ARG_location_use_dict[i][0][4]
                                for j in fasta_file:
                                    if i in j:
                                        seq_dict = fasta2dict(fasta + '/' + j)
                                        for m in seq_dict:
                                            if ARG_location_use_dict[i][0][5] in m:
                                                seq = seq_dict[m][int(start) - 1: int(end)]
                                                frame_list = []
                                                for frame_start in range(3):
                                                    frame = translate(seq[frame_start:], table=11)
                                                    Non_count = frame.count("*")
                                                    frame_list.append((Non_count, frame))
                                                frame_list_use = sorted(frame_list)
                                                gene_protein = frame_list_use[0][1]

                                                for n in dic_group:
                                                    if any(element in lis_type for element in dic_group[n]):
                                                        for key in fasta_dict_s:
                                                            for new_sero in dic_group[n]:
                                                                if dic_profile[new_sero][3] in key:
                                                                    frame_list = []
                                                                    for frame_start in range(3):
                                                                        frame = translate(Seq(fasta_dict_s[key]), table=11)
                                                                        Non_count = frame.count("*")
                                                                        frame_list.append((Non_count, frame))
                                                                    frame_list_use = sorted(frame_list)
                                                                    gene_protein_s = frame_list_use[0][1]

                                                                    num = int(dic_profile[new_sero][1]) - int(
                                                                        dic_profile[new_sero][0])

                                                                    if len(gene_protein_s) > len(gene_protein):
                                                                        alignments = pairwise2.align.localxs(gene_protein_s,
                                                                                                             gene_protein,
                                                                                                             -1e9,
                                                                                                             -1e9)
                                                                        if len(alignments) == 1:
                                                                            for alignment in alignments:
                                                                                sero_seq = alignment.seqB[
                                                                                           int(dic_profile[new_sero][
                                                                                                   0]) - 1: int(
                                                                                               dic_profile[new_sero][1])]
                                                                                if sero_seq == dic_profile[new_sero][2]:
                                                                                    print(i + ';' + new_sero)
                                                                                    print('------')
                                                                                    dic_new[i] = new_sero


                                                                    elif len(gene_protein_s) <= len(gene_protein):
                                                                        alignments = pairwise2.align.localxs(gene_protein_s,
                                                                                                             gene_protein,
                                                                                                             -1e9,
                                                                                                             -1e9)
                                                                        if len(alignments) == 1:
                                                                            for alignment in alignments:
                                                                                gene_protein_a = alignment.seqB[
                                                                                                 int(alignment.start): int(
                                                                                                     alignment.end)]
                                                                        aligns = pairwise2.align.localxs(gene_protein_s,
                                                                                                         gene_protein_a,
                                                                                                         -1e9, -1e9)

                                                                        if len(aligns) == 1:
                                                                            for align in aligns:
                                                                                sero_seq = align.seqB[
                                                                                           int(dic_profile[new_sero][
                                                                                                   0]) - 1: int(
                                                                                               dic_profile[new_sero][1])]
                                                                                if sero_seq == dic_profile[new_sero][2]:
                                                                                    print(i + ';' + new_sero)
                                                                                    print('------')
                                                                                    dic_new[i] = new_sero

                            elif ARG_location_use_dict[i][0][6] == 'R':
                                start = ARG_location_use_dict[i][0][3]
                                end = ARG_location_use_dict[i][0][4]
                                for j in fasta_file:
                                    if i in j:
                                        seq_dict = fasta2dict(fasta + '/' + j)
                                        for m in seq_dict:
                                            if ARG_location_use_dict[i][0][5] in m:
                                                gene_seq_ori = seq_dict[m][int(start) - 1: int(end)]
                                                seq = Seq(gene_seq_ori).reverse_complement()

                                                frame_list = []
                                                for frame_start in range(3):
                                                    frame = translate(seq[frame_start:], table=11)
                                                    Non_count = frame.count("*")
                                                    frame_list.append((Non_count, frame))
                                                frame_list_use = sorted(frame_list)
                                                gene_protein = frame_list_use[0][1]
                                                for n in dic_group:
                                                    if any(element == dic_new[i] for element in dic_group[n]):
                                                        for key in fasta_dict_s:
                                                            for new_sero in dic_group[n]:
                                                                if dic_profile[new_sero][3] in key:
                                                                    frame_list = []
                                                                    for frame_start in range(3):
                                                                        frame = translate(Seq(fasta_dict_s[key]), table=11)
                                                                        Non_count = frame.count("*")
                                                                        frame_list.append((Non_count, frame))
                                                                    frame_list_use = sorted(frame_list)
                                                                    gene_protein_s = frame_list_use[0][1]

                                                                    num = int(dic_profile[new_sero][1]) - int(
                                                                        dic_profile[new_sero][0])

                                                                    if len(gene_protein_s) > len(gene_protein):
                                                                        alignments = pairwise2.align.localxs(gene_protein_s,
                                                                                                             gene_protein,
                                                                                                             -1e9, -1e9)
                                                                        if len(alignments) == 1:
                                                                            for alignment in alignments:
                                                                                sero_seq = alignment.seqB[
                                                                                           int(dic_profile[new_sero][
                                                                                                   0]) - 1: int(
                                                                                               dic_profile[new_sero][1])]
                                                                                if sero_seq == dic_profile[new_sero][2]:
                                                                                    print(i + ';' + new_sero)
                                                                                    print('------')
                                                                                    dic_new[i] = new_sero


                                                                    elif len(gene_protein_s) <= len(gene_protein):
                                                                        alignments = pairwise2.align.localxs(gene_protein_s,
                                                                                                             gene_protein,
                                                                                                             -1e9, -1e9)
                                                                        if len(alignments) == 1:
                                                                            for alignment in alignments:
                                                                                gene_protein_a = alignment.seqB[
                                                                                                 int(alignment.start): int(
                                                                                                     alignment.end)]
                                                                        aligns = pairwise2.align.localxs(gene_protein_s,
                                                                                                         gene_protein_a,
                                                                                                         -1e9,
                                                                                                         -1e9)

                                                                        if len(aligns) == 1:
                                                                            for align in aligns:
                                                                                sero_seq = align.seqB[
                                                                                           int(dic_profile[new_sero][
                                                                                                   0]) - 1: int(
                                                                                               dic_profile[new_sero][1])]
                                                                                if sero_seq == dic_profile[new_sero][2]:
                                                                                    print(i + ';' + new_sero)
                                                                                    print('------')
                                                                                    dic_new[i] = new_sero

                        else:
                            print('error')

                with open(out_folder + '/Serotype_results_exact.out', 'w') as f:
                    line = 'Genome_ID' + '\t' + 'Serotype' + '\n'
                    f.write(line)
                    count = 0
                    for key in dic_new:
                        count += 1
                        if count == len(dic_new):
                            line = key + '\t' + dic_new[key]
                            f.write(line)
                        else:
                            line = key + '\t' + dic_new[key] + '\n'
                            f.write(line)
                f.close()

            self.trigger.emit('Finished!!!')

        except Exception as ex:
            self.trigger.emit('Some errors have occurred, %s!' % ex)


class Serotype_Form(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.work = WorkThread()

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(893, 534)
        Form.setWindowIcon(QIcon("./logo/logo.ico"))
        Form.setStyleSheet("background-image: url(./logo/green_back.png);")
        self.gridLayout_2 = QtWidgets.QGridLayout(Form)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setHorizontalSpacing(1)
        self.gridLayout.setVerticalSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout.addWidget(self.pushButton_5, 4, 2, 1, 1)
        self.label_10 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setItalic(True)
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_10.setObjectName("label_10")
        self.gridLayout.addWidget(self.label_10, 5, 0, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 4, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 1, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 4, 0, 1, 1)
        self.textBrowser_3 = QtWidgets.QTextBrowser(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser_3.sizePolicy().hasHeightForWidth())
        self.textBrowser_3.setSizePolicy(sizePolicy)
        self.textBrowser_3.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textBrowser_3.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.gridLayout.addWidget(self.textBrowser_3, 3, 1, 1, 1)
        self.textBrowser_2 = QtWidgets.QTextBrowser(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser_2.sizePolicy().hasHeightForWidth())
        self.textBrowser_2.setSizePolicy(sizePolicy)
        self.textBrowser_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textBrowser_2.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.gridLayout.addWidget(self.textBrowser_2, 3, 0, 1, 1)
        self.textBrowser_6 = QtWidgets.QTextBrowser(Form)
        self.textBrowser_6.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textBrowser_6.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_6.setObjectName("textBrowser_6")
        self.gridLayout.addWidget(self.textBrowser_6, 7, 1, 1, 1)
        self.pushButton_7 = QtWidgets.QPushButton(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        self.gridLayout.addWidget(self.pushButton_7, 8, 1, 1, 1)
        self.label_9 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 1, 2, 1, 1)
        self.label_11 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setItalic(True)
        self.label_11.setFont(font)
        self.label_11.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_11.setObjectName("label_11")
        self.gridLayout.addWidget(self.label_11, 5, 1, 1, 1)
        self.pushButton_6 = QtWidgets.QPushButton(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.gridLayout.addWidget(self.pushButton_6, 8, 0, 1, 1)
        self.textBrowser_5 = QtWidgets.QTextBrowser(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser_5.sizePolicy().hasHeightForWidth())
        self.textBrowser_5.setSizePolicy(sizePolicy)
        self.textBrowser_5.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textBrowser_5.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_5.setObjectName("textBrowser_5")
        self.gridLayout.addWidget(self.textBrowser_5, 7, 0, 1, 1)
        self.label = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 3)
        self.textBrowser_4 = QtWidgets.QTextBrowser(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser_4.sizePolicy().hasHeightForWidth())
        self.textBrowser_4.setSizePolicy(sizePolicy)
        self.textBrowser_4.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textBrowser_4.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.gridLayout.addWidget(self.textBrowser_4, 3, 2, 1, 1)
        self.label_7 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 10, 0, 1, 1)
        self.radioButton = QtWidgets.QRadioButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.radioButton.sizePolicy().hasHeightForWidth())
        self.radioButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton.setFont(font)
        self.radioButton.setStyleSheet("background-image: url(./logo/white.png);")
        self.radioButton.setObjectName("radioButton")
        self.gridLayout.addWidget(self.radioButton, 11, 0, 1, 1)
        self.label_8 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 5, 2, 1, 1)
        self.label_4 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 10, 1, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4.setSizePolicy(sizePolicy)
        self.pushButton_4.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 12, 2, 1, 1)
        self.label_6 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 11, 2, 1, 1)
        self.pushButton = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMaximumSize(QtCore.QSize(16777215, 80))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-image: url(./logo/white.png)")
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 15, 2, 1, 1)
        self.radioButton_2 = QtWidgets.QRadioButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.radioButton_2.sizePolicy().hasHeightForWidth())
        self.radioButton_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setStyleSheet("background-image: url(./logo/white.png);")
        self.radioButton_2.setObjectName("radioButton_2")
        self.gridLayout.addWidget(self.radioButton_2, 12, 0, 4, 1)
        self.textBrowser = QtWidgets.QTextBrowser(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser.sizePolicy().hasHeightForWidth())
        self.textBrowser.setSizePolicy(sizePolicy)
        self.textBrowser.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.textBrowser.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout.addWidget(self.textBrowser, 11, 1, 5, 1)
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setStyleSheet("background-image: url(./logo/white.png)")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.gridLayout.addWidget(self.tableWidget, 7, 2, 4, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        # button action
        self.pushButton.clicked.connect(self.calculation)
        self.pushButton_2.clicked.connect(self.read_file1)
        self.pushButton_3.clicked.connect(self.read_file2)
        self.pushButton_4.clicked.connect(self.table_read)
        self.pushButton_5.clicked.connect(self.read_file3)
        self.pushButton_6.clicked.connect(self.read_file4)
        self.pushButton_7.clicked.connect(self.read_file5)

        ## default
        self.textBrowser_2.setPlaceholderText("D:/fa_input")
        self.textBrowser_3.setPlaceholderText("D:/output")
        self.textBrowser_4.setPlaceholderText("D:/input/reference.fa")
        self.radioButton.setChecked(True)
        self.textBrowser_5.setPlaceholderText(" Default: NULL")
        self.textBrowser_6.setPlaceholderText(" Default: NULL")


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Serotype"))
        self.label_2.setText(_translate("Form", "Input folder (fasta)"))
        self.pushButton_5.setText(_translate("Form", "Choose"))
        self.label_10.setText(_translate("Form", "Profile (csv, optional)"))
        self.pushButton_3.setText(_translate("Form", "Choose"))
        self.label_3.setText(_translate("Form", "Output folder"))
        self.pushButton_2.setText(_translate("Form", "Choose"))
        self.pushButton_7.setText(_translate("Form", "Choose"))
        self.label_9.setText(_translate("Form", "Ref fasta file"))
        self.label_11.setText(_translate("Form", "Exact fasta file (optional)"))
        self.pushButton_6.setText(_translate("Form", "Choose"))
        self.label.setText(_translate("Form", "Serotype"))
        self.label_7.setText(_translate("Form", "Search mode"))
        self.radioButton.setText(_translate("Form", "Normal mode"))
        self.label_8.setText(_translate("Form", "Result table"))
        self.label_4.setText(_translate("Form", "Status"))
        self.pushButton_4.setText(_translate("Form", "Table"))
        self.label_6.setText(_translate("Form", "If the program is finished, click \'Table\' to display the result"))
        self.pushButton.setText(_translate("Form", "Run"))
        self.radioButton_2.setText(_translate("Form", "Precise mode"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Accession"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Length"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Pred"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Score"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Type"))


    def read_file1(self):
        openfile_name = QtWidgets.QFileDialog.getExistingDirectory(self, "choose file", "./")
        print(openfile_name)
        self.textBrowser_2.setText(openfile_name)


    def read_file2(self):
        openfile_name = QtWidgets.QFileDialog.getExistingDirectory(self, "choose file", "./")
        print(openfile_name)
        self.textBrowser_3.setText(openfile_name)

    def read_file3(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_4.setText(openfile_name)

    def read_file4(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_5.setText(openfile_name)

    def read_file5(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_6.setText(openfile_name)


    def finished(self, str):
        self.textBrowser.setText(str)


    def calculation(self):
        try:
            global fasta, out_folder, ref, file, blastdb, ref_tmp, evalue, format, path, type
            fasta = self.textBrowser_2.toPlainText()
            out_folder = self.textBrowser_3.toPlainText()
            ref = self.textBrowser_4.toPlainText()

            file = out_folder + "/Serotype_results.out"
            blastdb = out_folder + '/blastdb'
            ref_tmp = out_folder + '/ref_tmp.fasta'

            path = os.path.abspath('.')
            if '\\' in path:
                path = path.strip().split('\\')
                path = '/'.join(path)

            evalue = 1e-5
            format = str(6)

            if 0 in [len(fasta), len(out_folder), len(ref)]:
                QMessageBox.warning(self, "warning", "Please add correct file path!", QMessageBox.Cancel)
            else:
                self.textBrowser.setText(
                    'Running! please wait' + '\n' + 'If no response,never close window!!!')
                QApplication.processEvents()  # 逐条打印状态

                if self.radioButton.isChecked():
                    type = 'A'

                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_2.isChecked():
                    type = 'B'

                    global profile_file, ref_s, blastdb_s, ref_tmp_s
                    profile_file = self.textBrowser_5.toPlainText()
                    ref_s = self.textBrowser_6.toPlainText()

                    if any([len(profile_file), len(ref_s)]) == False:
                        QMessageBox.warning(self, "warning", "Please add correct file path!", QMessageBox.Cancel)
                    else:
                        blastdb_s = out_folder + '/blast_sdb'
                        ref_tmp_s = out_folder + '/ref_tmp_s.fasta'

                        # 启动线程, 运行 run 函数
                        self.work.start()
                        # 传送信号, 接受 run 函数执行完毕后的信号
                        self.work.trigger.connect(self.finished)

        except:
            QMessageBox.critical(self, "error", "Check fasta file format!")

    def table_read(self):
        try:
            global out_tmp

            if os.path.exists(out_folder + '/Serotype_results_exact.out'):
                result_file = out_folder + '/Serotype_results_exact.out'
                out_p = os.path.dirname(result_file)
                out_tmp = out_p + '/Serotype_results_exact_tmp.out'
            else:
                result_file = out_folder + '/Serotype_results.out'
                out_p = os.path.dirname(result_file)
                out_tmp = out_p + '/Serotype_results_tmp.out'

            with open(out_tmp, 'w') as w:
                f = open(result_file)
                count = 0
                for line in f:
                    if count == 0:
                        print('1')
                    else:
                        w.write(line)
                        print(line)
                    count = count + 1
            w.close()

            f = open(out_tmp)
            count = 0
            for line in f:
                count = count + 1

            nrows = int(count)
            print(nrows)
            ncols = 2
            self.tableWidget.setRowCount(nrows)  # 设置行数
            self.tableWidget.setColumnCount(ncols)

            f = open(out_tmp)
            row_num = 0
            for line in f:
                print(line)
                li = line.strip().split('\t')
                col_num = 0
                for i in li:
                    item = QTableWidgetItem(i)
                    print(item)
                    self.tableWidget.setItem(row_num, col_num, item)
                    print(row_num, col_num)
                    col_num = col_num + 1
                row_num = row_num + 1

        except:
            QMessageBox.critical(self, "error", "Please run program first!!!")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    WT = QtWidgets.QWidget()
    WT = winTest()
    ui = Serotype_Form()
    ui.setupUi(WT)
    WT.show()
    sys.exit(app.exec_())

