# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys,os
import time
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import paramiko
from Bio import SeqIO
from stat import S_ISDIR as isdir


class WorkThread(QThread):
    # 自定义信号对象
    trigger = pyqtSignal(str)

    def __int__(self):
        # 初始化函数
        super(WorkThread, self).__init__()

    def run(self):
        def up_file(source_file, target_folder):
            # 设置SSH连接参数
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(hostname='43.242.96.52',
                        username='xiaorunze',
                        password='hiplot!@#',
                        port=41526)

            # 执行命令
            stdin, stdout, stderr = ssh.exec_command('rm -r /home/xiaorunze/bugbase/input/*')
            time.sleep(3)

            # 执行命令
            stdin, stdout, stderr = ssh.exec_command('rm -r /home/xiaorunze/bugbase/output/')
            time.sleep(3)

            # 使用SFTP传输文件
            sftp = ssh.open_sftp()
            sftp.put(source_file, target_folder)  # 目标文件名可以按需更改
            sftp.close()

            # 关闭SSH连接
            ssh.close()


        def up_file_2(source_file, target_folder):
            # 设置SSH连接参数
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(hostname='43.242.96.52',
                        username='xiaorunze',
                        password='hiplot!@#',
                        port=41526)

            # 使用SFTP传输文件
            sftp = ssh.open_sftp()
            sftp.put(source_file, target_folder)  # 目标文件名可以按需更改
            sftp.close()

            # 关闭SSH连接
            ssh.close()

        def run_command(otu, mapping):
            # 创建SSH对象
            ssh = paramiko.SSHClient()

            # 允许连接不在know_hosts文件中的主机
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

            # 连接服务器
            ssh.connect(hostname='43.242.96.52',
                        username='xiaorunze',
                        password='hiplot!@#',
                        port=41526)

            # 执行命令
            stdin, stdout, stderr = ssh.exec_command('python /home/xiaorunze/bugbase/run_python.py -u %s -m %s' % (otu, mapping))
            time.sleep(3)

            # 执行命令
            stdin, stdout, stderr = ssh.exec_command('bash /home/xiaorunze/bugbase/run_bugbase.sh')
            time.sleep(3)

            # 获取命令结果
            result = stdout.read().decode('utf8')
            print(result)  # 如果有输出的话

            # 关闭连接
            ssh.close()

        def check_local_dir(local_dir_name):
            """本地文件夹是否存在，不存在则创建"""
            if not os.path.exists(local_dir_name):
                os.makedirs(local_dir_name)

        def down_from_remote(sftp_obj, remote_dir_name, local_dir_name):
            """远程下载文件"""
            remote_file = sftp_obj.stat(remote_dir_name)
            if isdir(remote_file.st_mode):
                # 文件夹，不能直接下载，需要继续循环
                check_local_dir(local_dir_name)
                print('开始下载文件夹：' + remote_dir_name)
                for remote_file_name in sftp.listdir(remote_dir_name):
                    sub_remote = os.path.join(remote_dir_name, remote_file_name)
                    sub_remote = sub_remote.replace('\\', '/')
                    sub_local = os.path.join(local_dir_name, remote_file_name)
                    sub_local = sub_local.replace('\\', '/')
                    down_from_remote(sftp_obj, sub_remote, sub_local)
            else:
                # 文件，直接下载
                print('开始下载文件：' + remote_dir_name)
                sftp.get(remote_dir_name, local_dir_name)

        try:
            time.sleep(3)
            self.trigger.emit('Updating the file!!!')
            up_file(otu,'/home/xiaorunze/bugbase/input/' + os.path.basename(otu))
            up_file_2(mapping, '/home/xiaorunze/bugbase/input/' + os.path.basename(mapping))
            time.sleep(3)

            self.trigger.emit('Running the bugbase for about 2 mins!!!')
            run_command(os.path.basename(otu), os.path.basename(mapping))

            host_name = '43.242.96.52'
            user_name = 'xiaorunze'
            password = 'hiplot!@#'
            port = 41526
            # 远程文件路径（需要绝对路径）
            remote_dir = '/home/xiaorunze/bugbase/output'
            # 本地文件存放路径（绝对路径或者相对路径都可以）
            local_dir = out

            # 连接远程服务器
            t = paramiko.Transport((host_name, port))
            t.connect(username=user_name, password=password)
            sftp = paramiko.SFTPClient.from_transport(t)
            # 远程文件开始下载
            down_from_remote(sftp, remote_dir, local_dir)
            # 关闭连接
            t.close()

            self.trigger.emit('Finished!!!')


        except Exception as ex:
            self.trigger.emit('Some errors have occurred, %s!' % ex)


class Bugbase_Form(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.work = WorkThread()

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(700, 467)
        Form.setWindowIcon(QIcon("./logo/logo.ico"))
        Form.setStyleSheet("background-image: url(./logo/green_back.png);")
        self.gridLayout_6 = QtWidgets.QGridLayout(Form)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Form)
        self.textBrowser_2.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.gridLayout.addWidget(self.textBrowser_2, 1, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 2, 0, 1, 1)
        self.gridLayout_6.addLayout(self.gridLayout, 1, 0, 1, 1)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_5 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.gridLayout_4.addWidget(self.label_5, 0, 0, 1, 1)
        self.textBrowser = QtWidgets.QTextBrowser(Form)
        self.textBrowser.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout_4.addWidget(self.textBrowser, 1, 0, 1, 1)
        self.gridLayout_4.setRowStretch(0, 1)
        self.gridLayout_4.setRowStretch(1, 3)
        self.gridLayout_6.addLayout(self.gridLayout_4, 2, 1, 1, 1)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.textBrowser_3 = QtWidgets.QTextBrowser(Form)
        self.textBrowser_3.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.gridLayout_3.addWidget(self.textBrowser_3, 1, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout_3.addWidget(self.label_3, 0, 0, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout_3.addWidget(self.pushButton_3, 2, 0, 1, 1)
        self.gridLayout_6.addLayout(self.gridLayout_3, 1, 1, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_4 = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 0, 0, 1, 1)
        self.textBrowser_4 = QtWidgets.QTextBrowser(Form)
        self.textBrowser_4.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.gridLayout_2.addWidget(self.textBrowser_4, 1, 0, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout_2.addWidget(self.pushButton_4, 2, 0, 1, 1)
        self.gridLayout_6.addLayout(self.gridLayout_2, 2, 0, 1, 1)
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.label = QtWidgets.QLabel(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout_5.addWidget(self.label, 0, 0, 1, 1)
        self.gridLayout_6.addLayout(self.gridLayout_5, 0, 0, 1, 2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton = QtWidgets.QPushButton(Form)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-image: url(./logo/white.png)")
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.gridLayout_6.addLayout(self.verticalLayout, 3, 1, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        # button action
        self.pushButton.clicked.connect(self.calculation)
        self.pushButton_2.clicked.connect(self.read_file1)
        self.pushButton_3.clicked.connect(self.read_file2)
        self.pushButton_4.clicked.connect(self.read_file3)

        ## default
        self.textBrowser_2.setPlaceholderText("D:/input/HMP_s15.txt")
        self.textBrowser_3.setPlaceholderText("D:/input/HMP_map.txt")
        self.textBrowser_4.setPlaceholderText("D:/output")

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Bugbase"))
        self.label_2.setText(_translate("Form", "Input file (Input OTU table)"))
        self.pushButton_2.setText(_translate("Form", "Choose"))
        self.label_5.setText(_translate("Form", "Status"))
        self.label_3.setText(_translate("Form", "Input file (Mapping file)"))
        self.pushButton_3.setText(_translate("Form", "Choose"))
        self.label_4.setText(_translate("Form", "Output folder"))
        self.pushButton_4.setText(_translate("Form", "Choose"))
        self.label.setText(_translate("Form", "Bugbase"))
        self.pushButton.setText(_translate("Form", "Run"))


    def read_file1(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_2.setText(openfile_name)

    def read_file2(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_3.setText(openfile_name)

    def read_file3(self):
        openfile_name = QtWidgets.QFileDialog.getExistingDirectory(self, "choose file", "./")
        print(openfile_name)
        self.textBrowser_4.setText(openfile_name)

    def finished(self, str):
        self.textBrowser.setText(str)

    def calculation(self):
        try:
            global otu, mapping, out, path
            otu = self.textBrowser_2.toPlainText()
            mapping = self.textBrowser_3.toPlainText()
            out = self.textBrowser_4.toPlainText()
            path = os.path.dirname(out)

            if 0 in [len(otu), len(mapping), len(out)]:
                QMessageBox.warning(self, "warning", "Please add correct file path!", QMessageBox.Cancel)
            else:
                self.textBrowser.setText('Running! please wait!')
                QApplication.processEvents()  # 逐条打印状态

                # 启动线程, 运行 run 函数
                self.work.start()
                # 传送信号, 接受 run 函数执行完毕后的信号
                self.work.trigger.connect(self.finished)

        except:
            QMessageBox.critical(self, "error", "Check otu file format!")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Bugbase_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
