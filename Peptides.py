# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Peptides.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys,os
import time
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from keras.models import load_model
from numpy import loadtxt, savetxt
import os,psutil
from Bio import SeqIO


class WorkThread(QThread):
    # 自定义信号对象
    trigger = pyqtSignal(str)

    def __int__(self):
        # 初始化函数
        super(WorkThread, self).__init__()

    def run(self):
        global out

        def check_process_running(process_name):  # 检查进程是否运行
            for process in psutil.process_iter(['name']):
                if process.info['name'] == process_name:
                    return True
            return False

        os.popen(r".\perl\bin\perl.exe .\perl\format.pl %s none > %s"
                 % (fasta, path + '/tmp.txt'))
        time.sleep(3)
        process_name = 'perl.exe'
        while True:  # 判断 perl.exe 是否运行完成
            if check_process_running(process_name):
                print(f"The process {process_name} is running.")
                time.sleep(10)
                continue
            else:
                print(f"The process {process_name} is not running.")
                break

        model = load_model('./models/Activity/lstm.h5')
        x = loadtxt(path + '/tmp.txt', delimiter=",")
        preds = model.predict(x)
        savetxt(path + '/tmpActivity.txt', preds, fmt="%.8f", delimiter=",")

        with open(fasta) as fa:
            fa_dict = {}
            for line in fa:
                line = line.replace('\n', '')
                if line.startswith('>'):
                    seq_name = line[1:]
                    fa_dict[seq_name] = ''
                else:
                    fa_dict[seq_name] += line.replace('\n', '')
        fa.close()

        lis = []
        with open(path + '/tmpActivity.txt') as ac:
            for i in ac:
                i = i.replace('\n', '')
                lis.append(i)
        ac.close()

        for i_1 in range(0, len(lis)):
            key = list(fa_dict.keys())[i_1]
            val = [fa_dict.get(key, [])] + [lis[i_1]]
            fa_dict[key] = val

        with open(out, 'w') as f:
            for key in fa_dict:
                lines = key + '\t' + fa_dict[key][0] + '\t' + fa_dict[key][1] + '\n'
                print(lines)
                f.write(lines)
        f.close()

        os.remove(path + '/tmp.txt')
        os.remove(path + '/tmpActivity.txt')

        self.trigger.emit('Finished!!!')


class Peptides_Form(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.work = WorkThread()

    def setupUi(self, Clustal):
        Clustal.setObjectName("Clustal")
        Clustal.resize(702, 467)
        Clustal.setStyleSheet("background-image: url(D:/Documents/Desktop/bb.png)")
        self.label = QtWidgets.QLabel(Clustal)
        self.label.setGeometry(QtCore.QRect(250, 10, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Clustal)
        self.label_2.setGeometry(QtCore.QRect(60, 50, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_2.setGeometry(QtCore.QRect(60, 80, 181, 31))
        self.textBrowser_2.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_3 = QtWidgets.QLabel(Clustal)
        self.label_3.setGeometry(QtCore.QRect(60, 170, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.textBrowser_3 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_3.setGeometry(QtCore.QRect(60, 210, 181, 31))
        self.textBrowser_3.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.pushButton_2 = QtWidgets.QPushButton(Clustal)
        self.pushButton_2.setGeometry(QtCore.QRect(260, 80, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Clustal)
        self.pushButton_3.setGeometry(QtCore.QRect(260, 210, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.textBrowser = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser.setGeometry(QtCore.QRect(60, 330, 221, 111))
        self.textBrowser.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textBrowser.setObjectName("textBrowser")
        self.label_4 = QtWidgets.QLabel(Clustal)
        self.label_4.setGeometry(QtCore.QRect(120, 280, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(Clustal)
        self.pushButton.setGeometry(QtCore.QRect(560, 400, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_4 = QtWidgets.QPushButton(Clustal)
        self.pushButton_4.setGeometry(QtCore.QRect(350, 350, 331, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_6 = QtWidgets.QLabel(Clustal)
        self.label_6.setGeometry(QtCore.QRect(350, 320, 331, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.tableWidget = QtWidgets.QTableWidget(Clustal)
        self.tableWidget.setGeometry(QtCore.QRect(355, 70, 321, 241))
        self.tableWidget.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)

        self.retranslateUi(Clustal)
        QtCore.QMetaObject.connectSlotsByName(Clustal)

        # button action
        self.pushButton.clicked.connect(self.calculation)
        self.pushButton_2.clicked.connect(self.read_file1)
        self.pushButton_3.clicked.connect(self.read_file2)
        self.pushButton_4.clicked.connect(self.table_read)

    def retranslateUi(self, Clustal):
        _translate = QtCore.QCoreApplication.translate
        Clustal.setWindowTitle(_translate("Clustal", "Peptides activity"))
        self.label.setText(_translate("Clustal", "Peptides activity"))
        self.label_2.setText(_translate("Clustal", "Input fasta file"))
        self.label_3.setText(_translate("Clustal", "Output fasta file"))
        self.pushButton_2.setText(_translate("Clustal", "Choose"))
        self.pushButton_3.setText(_translate("Clustal", "Choose"))
        self.label_4.setText(_translate("Clustal", "Status"))
        self.pushButton.setText(_translate("Clustal", "Run"))
        self.pushButton_4.setText(_translate("Clustal", "Table"))
        self.label_6.setText(_translate("Clustal", "If the program is finished, click \'Table\' to display the result"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Clustal", "Sequence ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Clustal", "Sequence"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Clustal", "Activity"))

    def read_file1(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_2.setText(openfile_name)

    def read_file2(self):
        openfile_name = QtWidgets.QFileDialog.getSaveFileName(self, "choose file", "./")[0]
        print(openfile_name)
        self.textBrowser_3.setText(openfile_name)

    def finished(self, str):
        self.textBrowser.setText(str)

    def calculation(self):
        try:
            global fasta
            global out
            global path

            fasta = self.textBrowser_2.toPlainText()
            out = self.textBrowser_3.toPlainText()
            path = os.path.dirname(out)

            def is_fasta(filename):
                with open(filename, "r") as handle:
                    fasta = SeqIO.parse(handle, "fasta")
                    return any(fasta)


            if any([len(fasta), len(out)]) == False:
                QMessageBox.warning(self, "warning", "Please add correct file path!", QMessageBox.Cancel)
            else:
                if is_fasta(fasta) == False:
                    QMessageBox.critical(self, "error", "Check fasta file format!")
                else:
                    self.textBrowser.setText('Running! please wait')
                    QApplication.processEvents()  # 逐条打印状态

                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

        except:
            QMessageBox.critical(self, "error", "Check fasta file format!")

    def table_read(self):
        try:
            f = open(out)
            count = 0
            for line in f:
                count = count + 1

            nrows = int(count)
            ncols = 3
            self.tableWidget.setRowCount(nrows)  # 设置行数
            self.tableWidget.setColumnCount(ncols)

            f = open(out)
            row_num = 0
            for line in f:
                print(line)
                li = line.strip().split('\t')
                col_num = 0
                for i in li:
                    item = QTableWidgetItem(i)
                    print(item)
                    self.tableWidget.setItem(row_num, col_num, item)
                    print(row_num,col_num)
                    col_num = col_num + 1
                row_num = row_num + 1
        except:
            QMessageBox.critical(self, "error", "Please run program first!!!")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Clustal = QtWidgets.QWidget()
    ui = Peptides_Form()
    ui.setupUi(Clustal)
    Clustal.show()
    sys.exit(app.exec_())
