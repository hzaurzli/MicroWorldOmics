# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ProtVista.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys,os,shutil
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtWebEngineWidgets import QWebEngineView


class winTest(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('My Browser')
        self.setStyleSheet("background-image: url(./logo/backgroundpage.png)")

    """对QDialog类重写，实现一些功能"""

    def closeEvent(self, event):
        """
        重写closeEvent方法，实现dialog窗体关闭时执行一些代码
        :param event: close()触发的事件
        :return: None
        """
        try:
            if os.path.exists(os.path.dirname(content_final) + '/external_P05067.json') == True:
                print(content_final)
                os.remove(os.path.dirname(content_final) + '/external_P05067.json')
            else:
                return None  # 设置正常退出
        except:
            return None  # 设置正常退出

class Protvista_Form(QWidget):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(633, 412)
        Form.setWindowIcon(QIcon("./logo/logo.ico"))
        Form.setStyleSheet("background-image: url(./logo/green_back.png);")
        self.gridLayout_4 = QtWidgets.QGridLayout(Form)
        self.gridLayout_4.setVerticalSpacing(0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setVerticalSpacing(0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.textBrowser = QtWidgets.QTextBrowser(Form)
        self.textBrowser.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout_5.addWidget(self.textBrowser, 5, 0, 2, 2)
        self.pushButton = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(25)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_5.addWidget(self.pushButton, 8, 0, 1, 2)
        self.label = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout_5.addWidget(self.label, 0, 0, 1, 2)
        self.label_2 = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout_5.addWidget(self.label_2, 3, 0, 1, 2)
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(25)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout_5.addWidget(self.pushButton_2, 7, 0, 1, 2)
        self.gridLayout_4.addLayout(self.gridLayout_5, 0, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        # action
        self.pushButton.clicked.connect(self.web_open)
        self.pushButton_2.clicked.connect(self.read_file1)

        ## default
        self.textBrowser.setPlaceholderText("D:/input/ex.json")

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "ProtVista"))
        self.pushButton.setText(_translate("Form", "Run"))
        self.label.setText(_translate("Form", "ProtVista"))
        self.label_2.setText(_translate("Form", "Input JSON file"))
        self.pushButton_2.setText(_translate("Form", "Choose"))


    def read_file1(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser.setText(openfile_name)


    def web_open(self):
        # 绑定按钮点击事件，发射信号
        content = self.textBrowser.toPlainText()
        content = content.strip()
        content_file = os.path.basename(content)

        bool_1 = content_file.endswith(".json")
        bool_2 = content_file.endswith(".JSON")
        bool_3 = content_file.endswith(".Json")
        print(bool_1 or bool_2 or bool_3 == True)

        if bool_1 or bool_2 or bool_3 == True:
            path_1 = os.path.abspath('.')
            path_1 = path_1.strip().split('\\')
            path = '/'.join(path_1) + "/html/protvista/"

            shutil.copy(content, path)
            global content_final
            if os.path.exists(path + 'external_P05067.json'):
                os.remove(path + 'external_P05067.json')
                os.rename(path + content_file, path + 'external_P05067.json')
                content_final = path + 'external_P05067.json'
            else:
                os.rename(path + content_file, path + 'external_P05067.json')
                content_final = path + 'external_P05067.json'

            print(content_final)
            if content_final == '':
                w = QWidget()
                QMessageBox.critical(w, "error",
                                     "Please add correct path!")
            else:
                self.winTable = MainWindow(content_final)
                self.winTable.show()
        else:
            QMessageBox.critical(self, "error", "Please check format(suffix: json or JSON)!")


class MainWindow(QMainWindow):
    def __init__(self, content):
        super().__init__()
        self.setWindowTitle('ProtVista')
        self.setWindowIcon(QIcon("./logo/logo.ico"))
        self.showMaximized()

        self.path_1 = os.path.abspath('.')
        self.path_1 = self.path_1.strip().split('\\')
        self.path = '/'.join(self.path_1)

        #####放入WebEngineView
        self.webview = WebEngineView()
        self.webview.load(QUrl(self.path + "/html/protvista/ProtVista.html"))
        self.setCentralWidget(self.webview)

        #####web页面加载完毕，调用函数
        self.webview.page().loadFinished.connect(lambda: self.run_js(content)) # 信号函数传参

    def run_js(self, content):
        js_string_1 = '''
            var yourDiv = document.getElementById('yourDiv');
            var ProtVista = require('ProtVista');
            var instance = new ProtVista({
            el: yourDiv,
            uniprotacc: "P05067", 
            defaultSources: true,
            customDataSource: {
                 url: "'''

        js_string_2 = '''",
                source: 'myLab',
                useExtension: true
                }
            });
        '''
        content_path = os.path.dirname(content)
        content = content_path + '/external_'

        js_string = js_string_1 + content + js_string_2
        print(js_string)
        self.webview.page().runJavaScript(js_string)


class WebEngineView(QWebEngineView):
    windowList = []

    # 重写createwindow()
    def createWindow(self, QWebEnginePage_WebWindowType):
        new_webview = WebEngineView()
        new_window = MainWindow()
        new_window.setCentralWidget(new_webview)
        # new_window.show()
        self.windowList.append(new_window)  # 注：没有这句会崩溃
        return new_webview


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    WT = QtWidgets.QWidget()
    WT = winTest()
    ui = Protvista_Form()
    ui.setupUi(WT)
    WT.show()
    sys.exit(app.exec_())
