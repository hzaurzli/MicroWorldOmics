# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CoreGenomeAnalysis.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import os, sys, re, math
import os
import sys, getopt
import operator
from Bio import SeqIO
from Bio import AlignIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Blast.Applications import NcbimakeblastdbCommandline
from Bio.Blast.Applications import NcbiblastnCommandline
import subprocess


class winTest(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('My Browser')
        self.setStyleSheet("background-image: url(./logo/backgroundpage.png)")

    """对QDialog类重写，实现一些功能"""

    def closeEvent(self, event):
        """
        重写closeEvent方法，实现dialog窗体关闭时执行一些代码
        :param event: close()触发的事件
        :return: None
        """
        try:
            if os.path.exists(ref_tmp):
                os.remove(ref_tmp)
            else:
                event.ignore()  # 设置正常退出
        except:
            return None  # 设置正常退出


class WorkThread(QThread):
    # 自定义信号对象
    trigger = pyqtSignal(str)

    def __int__(self):
        # 初始化函数
        super(WorkThread, self).__init__()

    def run(self):
        def blast_filter(out_folder, align_percent, identical_percent):
            ARG_location_dict = {}
            rootdir1 = out_folder + "/out"
            for filename in os.listdir(rootdir1):
                blast_info = open(rootdir1 + '/' + filename, "r")
                dd = filename.split(".")[0]
                for line in blast_info:
                    line_info = line.strip().split("\t")
                    Contig_ID_info = line_info[0]
                    ARG_ID = line_info[1]
                    ARG_len = line_info[1].split("::")[-1]
                    identical_percent = line_info[2]
                    align_length = int(line_info[3])
                    contig_start = int(line_info[6])
                    contig_end = int(line_info[7])
                    ARG_start = int(line_info[8])
                    ARG_end = int(line_info[9])
                    Score = float(line_info[11])
                    F_R = "F"
                    if ARG_end < ARG_start:
                        F_R = "R"
                    align_percent = '%.2f' % (float(align_length) / float(ARG_len) * 100)
                    key_use = (dd, Contig_ID_info)
                    if float(align_percent) >= 10.00 and float(identical_percent) >= 10.00:
                        ARG_location_dict.setdefault(key_use, []).append((ARG_ID, contig_start, contig_end, Score,
                                                                          identical_percent, align_percent,
                                                                          Contig_ID_info, F_R))
                blast_info.close()
            return ARG_location_dict

        def ARG_filter(ARG_location_dict):
            ARG_location_filter_dict = {}
            for item in ARG_location_dict.items():
                key_data = item[0]
                ARG_list = item[1]
                ARG_list.sort(key=operator.itemgetter(1))
                start_initial = 0
                ii_keep = 0
                ARG_filter_list = []
                for ii in range(len(ARG_list)):
                    if ARG_list[ii][1] >= start_initial:
                        ARG_filter_list.append((ARG_list[ii][0], ARG_list[ii][4], ARG_list[ii][5], ARG_list[ii][1],
                                                ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7], ARG_list[ii][3]))
                        start_initial = ARG_list[ii][2]
                        ii_keep = ii
                    elif ARG_list[ii][1] < start_initial and ARG_list[ii][2] > start_initial and float(
                        ARG_list[ii][2] - start_initial) / float(ARG_list[ii][2] - ARG_list[ii][1]) > 0.8 and float(
                        start_initial - ARG_list[ii][1]) / float(ARG_list[ii][0].split(":")[-1]) < 0.2:
                        ARG_filter_list.append((ARG_list[ii][0], ARG_list[ii][4], ARG_list[ii][5], ARG_list[ii][1],
                                                ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7], ARG_list[ii][3]))
                        start_initial = ARG_list[ii][2]
                        ii_keep = ii
                    else:
                        if ARG_list[ii][3] > ARG_list[ii_keep][3]:
                            sss = (ARG_list[ii_keep][0], ARG_list[ii_keep][4], ARG_list[ii_keep][5], ARG_list[ii][1],
                                   ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7], ARG_list[ii][3])
                            if sss in ARG_filter_list:
                                ARG_filter_list.remove(sss)
                            ARG_filter_list.append((ARG_list[ii][0], ARG_list[ii][4], ARG_list[ii][5], ARG_list[ii][1],
                                                    ARG_list[ii][2], ARG_list[ii][6], ARG_list[ii][7], ARG_list[ii][3]))
                            start_initial = ARG_list[ii][2]
                            ii_keep = ii
                        else:
                            continue
                ARG_filter_list_use = list(set(ARG_filter_list))
                ARG_location_filter_dict[key_data] = ARG_filter_list_use
            ARG_location_use_dict = {}
            for kk in ARG_location_filter_dict.items():
                ID_filter = kk[0]
                ARG_list = kk[1]
                Isolates_use = ID_filter[0]
                for i in ARG_list:
                    ARG_location_use_dict.setdefault(Isolates_use, []).append(i)
            return ARG_location_use_dict

        def Core_genome_cal(ARG_location_use_dict):
            Gene_dict = {}
            Genome_gene_have_dict = {}
            isolates_number = len(ARG_location_use_dict)
            Gene_number_list = []
            core_gene_list = []
            for item in ARG_location_use_dict.items():
                isolate_ID = item[0]
                Gene_list = item[1]
                for i in Gene_list:
                    Gene_ID = i[0]
                    Gene_identical = i[1]
                    Gene_aln_percent = i[2]
                    Gene_contig_loc_star = i[3]
                    Gene_contig_loc_end = i[4]
                    Contig_info = i[5]
                    Gene_F_R = i[6]
                    Gene_Score = i[7]
                    Gene_dict.setdefault(Gene_ID, []).append(isolate_ID)
                    Genome_gene_have_dict.setdefault(isolate_ID, []).append(Gene_ID)
            for j in Genome_gene_have_dict.items():
                isolate_name = j[0]
                Gene_list = j[1]
                Gene_list_filter = list(set(Gene_list))
                Gene_number_list.append((isolate_name, len(Gene_list_filter)))
            Gene_number_list.sort(key=operator.itemgetter(1))
            out_file = open(out_folder + "/Isolates_gene_number.out", "w")
            out_file2 = open(out_folder + "/core_gene_list.out", "w")
            out_file.write("Genome_ID" + "\t" + "Gene_number" + "\n")
            print("The genome with least gene number is: ", Gene_number_list[0][0], ":", Gene_number_list[0][1])
            for k in Gene_number_list:
                out_file.write(str(k[0]) + "\t" + str(k[1]) + "\n")
            out_file.close()
            for i in Gene_dict.items():
                Gene_name = i[0]
                Genome_list = i[1]
                Genome_list_filter = list(set(Genome_list))
                if len(Genome_list_filter) == isolates_number:
                    core_gene_list.append(Gene_name)
            for m in core_gene_list:
                out_file2.write(m + "\n")
            print("The number of core genes is : ", len(core_gene_list))
            print("Do you want to remove some genomes? ")
            out_file2.close()
            out_file.close()
            return core_gene_list

        def Gene_abstract_determine(ARG_location_use_dict, core_gene_list, out_folder, align_percent,
                                    identical_percent):
            ARG_abstract_dict = {}
            ARG_location_dict = blast_filter(out_folder, align_percent, identical_percent)
            for item in ARG_location_use_dict.items():
                Gene_filter_dict = {}
                Gene_list_filter = []
                isolates_info = item[0]
                Gene_list = item[1]
                for i in Gene_list:
                    Gene_ID = i[0]
                    Gene_identical = i[1]
                    Gene_aln_percent = i[2]
                    Gene_contig_loc_star = i[3]
                    Gene_contig_loc_end = i[4]
                    Contig_info = i[5]
                    Gene_F_R = i[6]
                    Gene_Score = i[7]
                    if Gene_ID in core_gene_list:
                        Gene_filter_dict.setdefault(Gene_ID, []).append(i)
                for item_i in Gene_filter_dict.items():
                    Gene_use = item_i[0]
                    Gene_count_list = item_i[1]
                    if len(Gene_count_list) == 1:
                        Gene_list_filter.append(Gene_count_list[0])
                    else:
                        Gene_count_list.sort(key=operator.itemgetter(-1))
                        Gene_use_final = Gene_count_list[-1]
                        Gene_list_filter.append(Gene_use_final)
                ARG_abstract_dict[isolates_info] = Gene_list_filter
            return ARG_abstract_dict

        def blast_seq_abstract(ARG_abstract_dict, fasta, out_folder):
            rootdir1 = fasta
            blast_info = open(out_folder + "/All_isolates_core_genes.fna", "w")
            records_use = []
            for filename in os.listdir(rootdir1):
                bb = filename.split(".")[0]
                if bb in ARG_abstract_dict:
                    ARG_list = ARG_abstract_dict[bb]
                    file_data = open(fasta + "/" + filename, "r")
                    for record in SeqIO.parse(file_data, "fasta"):
                        ID = record.id
                        contig_len = len(record.seq)
                        for i in ARG_list:
                            if ID == i[5]:
                                ARG_ID = i[0]
                                F_R = i[6]
                                location_S = int(i[3])
                                location_E = int(i[4])
                                if F_R == "F":  # F means the genes is Forward
                                    gene_seq = record.seq[location_S - 1:location_E]
                                    element_ID = bb + ":" + ARG_ID + ":" + F_R
                                    element_record = SeqRecord(gene_seq, id=element_ID, description="")
                                    records_use.append(element_record)
                                elif F_R == "R":  # R means the genes is Reverse
                                    gene_seq_ori = record.seq[location_S - 1:location_E]
                                    gene_seq = gene_seq_ori.reverse_complement()
                                    element_ID = bb + ":" + ARG_ID + ":" + F_R
                                    element_record = SeqRecord(gene_seq, id=element_ID, description="")
                                    records_use.append(element_record)
                    file_data.close()
            SeqIO.write(records_use, blast_info, "fasta")
            blast_info.close()
            return records_use

        def creat_aln_file(records_use, core_gene_list):
            gene_list = []
            core_gene_list_use = sorted(core_gene_list)
            for record in records_use:  # >083_2A:ADNHCAIG_00326:198:F
                ID_info = record.id.strip().split("::")
                Genome_ID = ID_info[0].split(':')[0]
                Gene_ID = ID_info[0].split(':')[1] + "::" + ID_info[1].split(':')[0]
                if Gene_ID in core_gene_list_use:
                    Gene_ID_use = Gene_ID.split("::")[0] + "-" + Gene_ID.split("::")[1]
                    out_file = open(out_folder + "/corefa/" + Gene_ID_use + ".corefa", "a")
                    SeqIO.write(record, out_file, "fasta")
                    out_file.close()
            return None

        def do_alignment(out_folder):
            rootdir1 = out_folder + "/corefa"
            for filename in os.listdir(rootdir1):
                file = filename.split(".")[-1]
                if file == "corefa":
                    self.trigger.emit('Running: ' + filename + '\n' + 'The time cost for this step depends on the number of genomes')
                    p = subprocess.Popen(path + "/tools/clustalo/clustal_omega/clustalo.exe -i "
                                         + out_folder + "/corefa/" + filename + " -o "
                                         + out_folder + "/corefa/" + filename + ".aln -v")
                    p.wait()
            return None

        def fasta2dict(fasta_name):
            with open(fasta_name) as fa:
                fa_dict = {}
                for line in fa:
                    # 去除末尾换行符
                    line = line.replace('\n', '')
                    if line.startswith('>'):
                        # 去除 > 号
                        seq_name = line[1:]
                        seq_name = seq_name.strip()
                        seq_name = seq_name.split('\t')[0]
                        seq_name = seq_name.split(' ')[0]
                        fa_dict[seq_name] = ''
                    else:
                        # 去除末尾换行符并连接多行序列
                        fa_dict[seq_name] += line.replace('\n', '')
            return fa_dict

        def connect_aln_file(out_folder):
            dir = out_folder + "/corefa"
            with open(out_folder + "/corefa/All_core_genes_aln.fasta", 'w') as w:
                for file in os.listdir(dir):
                    suffix = file.split('.')[-1]
                    if suffix == 'aln':
                        with open(out_folder + "/All_core_genes_aln.fasta", 'w') as w:
                            f = open(out_folder + "/corefa/" + file)
                            for line in f:
                                w.write(line)
            w.close()

            blast_info = open(out_folder + "/All_core_genes_aln.fasta", "r")
            out_file = open(out_folder + "/Core_genome.aln", "w")
            genome_seq_dict = {}
            for record in SeqIO.parse(blast_info, "fasta"):
                ID = record.id
                isolate_use = ID.strip().split(":")[0]
                core_gene = ID.strip().split(":")[1]
                Seq = record.seq
                Len_use = len(Seq)
                Len_key = (Len_use, core_gene)
                genome_seq_dict.setdefault(isolate_use, []).append((core_gene, Seq))
            record_list = []
            for item in genome_seq_dict.items():
                Seq_use = ""
                genome_ID = item[0]
                Seq_list = item[1]
                Seq_list_use = sorted(Seq_list)
                for jj in Seq_list_use:
                    Seq_use = Seq_use + jj[1]
                Seq_record = SeqRecord(Seq_use, id=genome_ID, description="")
                record_list.append(Seq_record)
            SeqIO.write(record_list, out_file, "fasta")
            out_file.close()
            blast_info.close()
            return None

        def check_path(pth):
            if not os.path.isdir(pth):
                os.makedirs(pth)

        def is_fasta(filename):
            with open(filename, "r") as handle:
                fasta = SeqIO.parse(handle, "fasta")
                return any(fasta)

        check_path(blastdb)
        check_path(out_folder + '/out')
        check_path(out_folder + '/corefa')

        fasta_dict = fasta2dict(ref)

        with open(ref_tmp, 'w') as w:
            for key in fasta_dict:
                line = '>' + key + '::' + str(len(fasta_dict[key])) + '\n' + fasta_dict[key] + '\n'
                w.write(line)
        w.close()

        makedb = NcbimakeblastdbCommandline(path + "/blast-BLAST_VERSION+/bin/makeblastdb.exe",
                                            dbtype='nucl',
                                            input_file=out_folder + '/ref_tmp.fasta',
                                            out=blastdb + '/target')

        makedb()

        for i in os.listdir(fasta):
            print(i)
            out = out_folder + '/out/' + os.path.splitext(i)[0] + '.Core'
            query = fasta + '/' + i

            if is_fasta(query) == False:
                QMessageBox.critical(self, "error", "Check fasta file format!")
            else:
                blastn = NcbiblastnCommandline(path + "/blast-BLAST_VERSION+/bin/blastn.exe",
                                               query=query,
                                               db=blastdb + '/target',
                                               outfmt=format,
                                               evalue=float(evalue),
                                               out=out,
                                               max_target_seqs=100000)

                blastn()

        ARG_location_dict = blast_filter(out_folder, align_percent, identical_percent)
        ARG_location_use_dict = ARG_filter(ARG_location_dict)
        core_gene_list = Core_genome_cal(ARG_location_use_dict)
        ARG_abstract_dict = Gene_abstract_determine(ARG_location_use_dict,
                                                    core_gene_list, out_folder,
                                                    align_percent, identical_percent)

        records_use = blast_seq_abstract(ARG_abstract_dict, fasta, out_folder)
        creat_aln_file(records_use, core_gene_list)
        do_alignment(out_folder)
        connect_aln_file(out_folder)

        self.trigger.emit("Finished, Core_genome.aln is your result!!!")


class Core_genome_Form(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.work = WorkThread()

    def setupUi(self, Clustal):
        Clustal.setObjectName("Clustal")
        Clustal.resize(716, 467)
        Clustal.setStyleSheet("background-image: url(./logo/backgroundpage.png)")
        self.label = QtWidgets.QLabel(Clustal)
        self.label.setGeometry(QtCore.QRect(220, 10, 271, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Clustal)
        self.label_2.setGeometry(QtCore.QRect(30, 280, 151, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_2.setGeometry(QtCore.QRect(30, 310, 231, 31))
        self.textBrowser_2.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_3 = QtWidgets.QLabel(Clustal)
        self.label_3.setGeometry(QtCore.QRect(30, 370, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.textBrowser_3 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_3.setGeometry(QtCore.QRect(30, 400, 231, 31))
        self.textBrowser_3.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.pushButton_2 = QtWidgets.QPushButton(Clustal)
        self.pushButton_2.setGeometry(QtCore.QRect(290, 310, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Clustal)
        self.pushButton_3.setGeometry(QtCore.QRect(290, 400, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.textBrowser = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser.setGeometry(QtCore.QRect(450, 90, 241, 81))
        self.textBrowser.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser.setObjectName("textBrowser")
        self.label_4 = QtWidgets.QLabel(Clustal)
        self.label_4.setGeometry(QtCore.QRect(520, 60, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(Clustal)
        self.pushButton.setGeometry(QtCore.QRect(600, 390, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-image: url(./logo/white.png)")
        self.pushButton.setObjectName("pushButton")
        self.label_5 = QtWidgets.QLabel(Clustal)
        self.label_5.setGeometry(QtCore.QRect(400, 280, 151, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.pushButton_4 = QtWidgets.QPushButton(Clustal)
        self.pushButton_4.setGeometry(QtCore.QRect(630, 310, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.textBrowser_4 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_4.setGeometry(QtCore.QRect(400, 310, 211, 31))
        self.textBrowser_4.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.label_6 = QtWidgets.QLabel(Clustal)
        self.label_6.setGeometry(QtCore.QRect(40, 90, 351, 171))
        self.label_6.setText("")
        self.label_6.setTextFormat(QtCore.Qt.AutoText)
        self.label_6.setPixmap(QtGui.QPixmap("./logo/core.png"))
        self.label_6.setScaledContents(True)
        self.label_6.setWordWrap(False)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(Clustal)
        self.label_7.setGeometry(QtCore.QRect(30, 60, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.label_9 = QtWidgets.QLabel(Clustal)
        self.label_9.setGeometry(QtCore.QRect(580, 190, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setItalic(True)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.label_8 = QtWidgets.QLabel(Clustal)
        self.label_8.setGeometry(QtCore.QRect(430, 190, 141, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setItalic(True)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.textEdit = QtWidgets.QTextEdit(Clustal)
        self.textEdit.setGeometry(QtCore.QRect(430, 220, 121, 31))
        self.textEdit.setStyleSheet("background-image: url(./logo/white.png)")
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(Clustal)
        self.textEdit_2.setGeometry(QtCore.QRect(580, 220, 121, 31))
        self.textEdit_2.setStyleSheet("background-image: url(./logo/white.png)")
        self.textEdit_2.setObjectName("textEdit_2")

        self.retranslateUi(Clustal)
        QtCore.QMetaObject.connectSlotsByName(Clustal)


        # button action
        self.pushButton.clicked.connect(self.calculation)
        self.pushButton_2.clicked.connect(self.read_file1)
        self.pushButton_3.clicked.connect(self.read_file2)
        self.pushButton_4.clicked.connect(self.read_file3)

        self.textEdit.setPlaceholderText(" Default: 80 (%)")
        self.textEdit_2.setPlaceholderText(" Default: 80 (%)")


    def retranslateUi(self, Clustal):
        _translate = QtCore.QCoreApplication.translate
        Clustal.setWindowTitle(_translate("Clustal", "Core genome analysis"))
        self.label.setText(_translate("Clustal", "Core genome analysis"))
        self.label_2.setText(_translate("Clustal", "Input folder (fasta)"))
        self.label_3.setText(_translate("Clustal", "Output folder"))
        self.pushButton_2.setText(_translate("Clustal", "Choose"))
        self.pushButton_3.setText(_translate("Clustal", "Choose"))
        self.label_4.setText(_translate("Clustal", "Status"))
        self.pushButton.setText(_translate("Clustal", "Run"))
        self.label_5.setText(_translate("Clustal", "Ref fasta file (ffn)"))
        self.pushButton_4.setText(_translate("Clustal", "Choose"))
        self.label_7.setText(_translate("Clustal", "Core genome concept"))
        self.label_9.setText(_translate("Clustal", "Gene coverage (%)"))
        self.label_8.setText(_translate("Clustal", "Identification (%)"))


    def read_file1(self):
        openfile_name = QtWidgets.QFileDialog.getExistingDirectory(self, "choose file", "./")
        print(openfile_name)
        self.textBrowser_2.setText(openfile_name)

    def read_file2(self):
        openfile_name = QtWidgets.QFileDialog.getExistingDirectory(self, "choose file", "./")
        print(openfile_name)
        self.textBrowser_3.setText(openfile_name)

    def read_file3(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_4.setText(openfile_name)

    def finished(self, str):
        self.textBrowser.setText(str)


    def calculation(self):
        try:
            global fasta, out_folder, ref
            global blastdb, ref_tmp, evalue, format
            global path, align_percent, identical_percent

            fasta = self.textBrowser_2.toPlainText()
            out_folder = self.textBrowser_3.toPlainText()
            ref = self.textBrowser_4.toPlainText()

            blastdb = out_folder + '/blastdb'
            ref_tmp = out_folder + '/ref_tmp.fasta'

            evalue = 1e-5
            format = str(6)

            path = os.path.abspath('.')
            if '\\' in path:
                path = path.strip().split('\\')
                path = '/'.join(path)

            if any([len(fasta), len(out_folder), len(ref)]) == False:
                QMessageBox.warning(self, "warning", "Please add correct file path!", QMessageBox.Cancel)
            else:
                self.textBrowser.setText(
                    'Running! please wait' + '\n' + 'If no response,never close window!!!')
                QApplication.processEvents()  # 逐条打印状态

                try:
                    align_percent = str(self.textEdit.toPlainText())
                    if align_percent == '':
                        align_percent = 80
                    else:
                        align_percent = int(align_percent)
                except:
                    align_percent = 80

                try:
                    identical_percent = str(self.textEdit_2.toPlainText())
                    if identical_percent == '':
                        identical_percent = 80
                    else:
                        identical_percent = int(identical_percent)
                except:
                    identical_percent = 80

                # 启动线程, 运行 run 函数
                self.work.start()
                # 传送信号, 接受 run 函数执行完毕后的信号
                self.work.trigger.connect(self.finished)

        except:
            QMessageBox.critical(self, "error", "Please run program first!!!")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    # Clustal = QtWidgets.QWidget()
    WT = winTest()
    ui = Core_genome_Form()
    ui.setupUi(WT)
    WT.show()
    sys.exit(app.exec_())
