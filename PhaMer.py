# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PhaMer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import os
import pandas as pd
import numpy as np
import pickle as pkl
import subprocess
import shutil
from shutil import which
from collections import Counter
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from models.PhaMer.model import Transformer
import torch
from torch import nn
from torch.nn import functional as F
from torch import optim
import torch.utils.data as Data
import numpy as np
import pandas as pd
import pickle as pkl


class winTest(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('My Browser')
        self.setStyleSheet("background-image: url(D:/Documents/Desktop/bb.png)")

    """对QDialog类重写，实现一些功能"""

    def closeEvent(self, event):
        """
        重写closeEvent方法，实现dialog窗体关闭时执行一些代码
        :param event: close()触发的事件
        :return: None
        """
        try:
            if os.path.exists(out_tmp):
                os.remove(out_tmp)
            else:
                event.ignore()  # 设置正常退出
        except:
            return None  # 设置正常退出


class PhaMer_Form(QWidget):
    def setupUi(self, Clustal):
        Clustal.setObjectName("Clustal")
        Clustal.resize(702, 467)
        Clustal.setStyleSheet("background-image: url(D:/Documents/Desktop/bb.png)")
        self.label = QtWidgets.QLabel(Clustal)
        self.label.setGeometry(QtCore.QRect(250, 10, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Clustal)
        self.label_2.setGeometry(QtCore.QRect(60, 50, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_2.setGeometry(QtCore.QRect(60, 80, 181, 31))
        self.textBrowser_2.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_3 = QtWidgets.QLabel(Clustal)
        self.label_3.setGeometry(QtCore.QRect(60, 120, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.textBrowser_3 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_3.setGeometry(QtCore.QRect(60, 160, 181, 31))
        self.textBrowser_3.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.pushButton_2 = QtWidgets.QPushButton(Clustal)
        self.pushButton_2.setGeometry(QtCore.QRect(260, 80, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Clustal)
        self.pushButton_3.setGeometry(QtCore.QRect(260, 160, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.textBrowser = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser.setGeometry(QtCore.QRect(60, 380, 191, 61))
        self.textBrowser.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textBrowser.setObjectName("textBrowser")
        self.label_4 = QtWidgets.QLabel(Clustal)
        self.label_4.setGeometry(QtCore.QRect(100, 340, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(Clustal)
        self.pushButton.setGeometry(QtCore.QRect(560, 400, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_4 = QtWidgets.QPushButton(Clustal)
        self.pushButton_4.setGeometry(QtCore.QRect(350, 350, 331, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_6 = QtWidgets.QLabel(Clustal)
        self.label_6.setGeometry(QtCore.QRect(350, 320, 331, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.tableWidget = QtWidgets.QTableWidget(Clustal)
        self.tableWidget.setGeometry(QtCore.QRect(355, 70, 321, 241))
        self.tableWidget.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.label_5 = QtWidgets.QLabel(Clustal)
        self.label_5.setGeometry(QtCore.QRect(60, 200, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.label_7 = QtWidgets.QLabel(Clustal)
        self.label_7.setGeometry(QtCore.QRect(60, 270, 181, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.textEdit = QtWidgets.QTextEdit(Clustal)
        self.textEdit.setGeometry(QtCore.QRect(60, 230, 181, 31))
        self.textEdit.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(Clustal)
        self.textEdit_2.setGeometry(QtCore.QRect(60, 300, 181, 31))
        self.textEdit_2.setStyleSheet("background-image: url(D:/Documents/Desktop/white.png)")
        self.textEdit_2.setObjectName("textEdit_2")

        self.retranslateUi(Clustal)
        QtCore.QMetaObject.connectSlotsByName(Clustal)

        # button action
        self.pushButton.clicked.connect(self.calculation)
        self.pushButton_2.clicked.connect(self.read_file1)
        self.pushButton_3.clicked.connect(self.read_file2)
        self.pushButton_4.clicked.connect(self.table_read)

        self.textEdit.setPlaceholderText(" Contig length filter: 3000")
        self.textEdit_2.setPlaceholderText(" Threshold: 0.3")


    def retranslateUi(self, Clustal):
        _translate = QtCore.QCoreApplication.translate
        Clustal.setWindowTitle(_translate("Clustal", "PhaMer"))
        self.label.setText(_translate("Clustal", "PhaMer"))
        self.label_2.setText(_translate("Clustal", "Input fasta file"))
        self.label_3.setText(_translate("Clustal", "Output fasta file"))
        self.pushButton_2.setText(_translate("Clustal", "Choose"))
        self.pushButton_3.setText(_translate("Clustal", "Choose"))
        self.label_4.setText(_translate("Clustal", "Status"))
        self.pushButton.setText(_translate("Clustal", "Run"))
        self.pushButton_4.setText(_translate("Clustal", "Table"))
        self.label_6.setText(_translate("Clustal", "If the program is finished, click \'Table\' to display the result"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Clustal", "Contig"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Clustal", "Pred"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Clustal", "Score"))
        self.label_5.setText(_translate("Clustal", "Contig length"))
        self.label_7.setText(_translate("Clustal", "Threshold to reject prophage"))


    def read_file1(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_2.setText(openfile_name)

    def read_file2(self):
        openfile_name = QtWidgets.QFileDialog.getExistingDirectory(self, "choose file", "./")
        print(openfile_name)
        self.textBrowser_3.setText(openfile_name)


    def calculation(self):
        try:
            global contigs
            global out

            contigs = self.textBrowser_2.toPlainText()
            out_fn = self.textBrowser_3.toPlainText()

            print(out_fn)
            out_dir = out_fn

            transformer_fn = out_dir + '/phamer'
            db_dir = './models/PhaMer/database'
            out = out_dir + '/example_prediction.csv'
            threads = 1
            proteins = None
            diamond_db = f'{db_dir}/database.dmnd'

            path = os.path.abspath('.')

            try:
                length = int(self.textEdit.toPlainText())
            except:
                length = 3000

            try:
                reject = float(self.textEdit_2.toPlainText())
            except:
                reject = 0.3


            def is_fasta(filename):
                with open(filename, "r") as handle:
                    fasta = SeqIO.parse(handle, "fasta")
                    return any(fasta)

            if any([len(contigs), len(out_fn)]) == False:
                QMessageBox.warning(self, "warning", "Please add correct file path!", QMessageBox.Cancel)
            else:
                if is_fasta(contigs) == False:
                    QMessageBox.critical(self, "error", "Check fasta file format!")
                else:
                    self.textBrowser.setText('Running! please wait(5-8mins)' + '\n' + 'If no response,never close window!!!')
                    QApplication.processEvents()  # 逐条打印状态

                    if not os.path.isdir(out_fn):
                        os.makedirs(out_fn)

                    if not os.path.isdir(transformer_fn):
                        os.makedirs(transformer_fn)

                    if not os.path.exists(db_dir):
                        print(f'Database directory {db_dir} missing or unreadable')

                    rec = []
                    for record in SeqIO.parse(contigs, 'fasta'):
                        if len(record.seq) > length:
                            rec.append(record)
                    SeqIO.write(rec, f'{out_fn}/filtered_contigs.fa', 'fasta')

                    if proteins is None:
                        prodigal = path + "/tools/prodigal/prodigal.exe"
                        prodigal_cmd = f'{prodigal} -i {out_fn}/filtered_contigs.fa -a {out_fn}/test_protein.fa -f gff -p meta'
                        print("Running prodigal...")
                        _ = subprocess.check_call(prodigal_cmd, shell=True, stdout=subprocess.DEVNULL,
                                                  stderr=subprocess.DEVNULL)
                    else:
                        shutil.copyfile(proteins, f'{out_fn}/test_protein.fa')

                    try:
                        if os.path.exists(diamond_db):
                            print(f'Using preformatted DIAMOND database ({diamond_db}) ...')
                        else:
                            # create database
                            diamond = path + '/tools/diamond/diamond.exe'
                            make_diamond_cmd = f'{diamond} makedb --threads {threads} --in {db_dir}/database.fa -d {out_fn}/database.dmnd'
                            print("Creating Diamond database...")
                            _ = subprocess.check_call(make_diamond_cmd, shell=True, stdout=subprocess.DEVNULL,
                                                      stderr=subprocess.DEVNULL)
                            diamond_db = f'{out_fn}/database.dmnd'
                    except:
                        print("diamond makedb failed")

                    def select_tab(file1, file2):
                        f = open(file1)
                        with open(file2, 'w') as w:
                            for i in f:
                                i = i.strip().split('\t')
                                print(i[0])
                                if i[0] != i[1]:
                                    line = i[0] + '\t' + i[1] + '\t' + i[10] + '\n'
                                    w.write(line)
                        w.close()

                    try:
                        # running alignment
                        diamond = path + '/tools/diamond/diamond.exe'
                        diamond_cmd = f'{diamond} blastp --threads {threads} --sensitive -d {diamond_db} -q {out_fn}/test_protein.fa -o {out_fn}/results.tab -k 1'
                        print("Running Diamond...")
                        _ = subprocess.check_call(diamond_cmd, shell=True, stdout=subprocess.DEVNULL,
                                                  stderr=subprocess.DEVNULL)
                        diamond_out_fp = f"{out_fn}/results.tab"
                        database_abc_fp = f"{out_fn}/results.abc"
                        select_tab(diamond_out_fp, database_abc_fp)
                    except:
                        print("diamond blastp failed")

                    proteins_df = pd.read_csv(f'{db_dir}/proteins.csv')
                    proteins_df.dropna(axis=0, how='any', inplace=True)
                    pc2wordsid = {pc: idx for idx, pc in enumerate(sorted(set(proteins_df['cluster'].values)))}
                    protein2pc = {protein: pc for protein, pc in
                                  zip(proteins_df['protein_id'].values, proteins_df['cluster'].values)}
                    blast_df = pd.read_csv(f"{out_fn}/results.abc", sep='\t', names=['query', 'ref', 'evalue'])

                    print(blast_df)
                    # Parse the DIAMOND results
                    contig2pcs = {}
                    for query, ref, evalue in zip(blast_df['query'].values, blast_df['ref'].values,
                                                  blast_df['evalue'].values):
                        conitg = query.rsplit('_', 1)[0]
                        idx = query.rsplit('_', 1)[1]
                        pc = pc2wordsid[protein2pc[ref]]
                        try:
                            contig2pcs[conitg].append((idx, pc, evalue))
                        except:
                            contig2pcs[conitg] = [(idx, pc, evalue)]

                    # Sorted by position
                    for contig in contig2pcs:
                        contig2pcs[contig] = sorted(contig2pcs[contig], key=lambda tup: tup[0])

                    # Contigs2sentence
                    contig2id = {contig: idx for idx, contig in enumerate(contig2pcs.keys())}
                    id2contig = {idx: contig for idx, contig in enumerate(contig2pcs.keys())}
                    sentence = np.zeros((len(contig2id.keys()), 300))
                    sentence_weight = np.ones((len(contig2id.keys()), 300))
                    for row in range(sentence.shape[0]):
                        contig = id2contig[row]
                        pcs = contig2pcs[contig]
                        for col in range(len(pcs)):
                            try:
                                _, sentence[row][col], sentence_weight[row][col] = pcs[col]
                                sentence[row][col] += 1
                            except:
                                break

                    # propostion
                    rec = []
                    for key in blast_df['query'].values:
                        name = key.rsplit('_', 1)[0]
                        rec.append(name)
                    counter = Counter(rec)
                    mapped_num = np.array([counter[item] for item in id2contig.values()])

                    rec = []
                    for record in SeqIO.parse(f'{out_fn}/test_protein.fa', 'fasta'):
                        name = record.id
                        name = name.rsplit('_', 1)[0]
                        rec.append(name)
                    counter = Counter(rec)
                    total_num = np.array([counter[item] for item in id2contig.values()])
                    proportion = mapped_num / total_num

                    pkl.dump(sentence, open(f'{transformer_fn}/sentence.feat', 'wb'))
                    pkl.dump(id2contig, open(f'{transformer_fn}/sentence_id2contig.dict', 'wb'))
                    pkl.dump(proportion, open(f'{transformer_fn}/sentence_proportion.feat', 'wb'))
                    pkl.dump(pc2wordsid, open(f'{transformer_fn}/pc2wordsid.dict', 'wb'))

                    if not os.path.exists(db_dir):
                        print(f'Database directory {db_dir} missing or unreadable')

                    if out_dir != '':
                        if not os.path.isdir(out_dir):
                            os.makedirs(out_dir)

                    pcs2idx = pkl.load(open(f'{transformer_fn}/pc2wordsid.dict', 'rb'))
                    num_pcs = len(set(pcs2idx.keys()))

                    reject = 0.3
                    threads = 1
                    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
                    if device.type == 'cpu':
                        print("running with cpu")
                        torch.set_num_threads(threads)

                    src_pad_idx = 0
                    src_vocab_size = num_pcs + 1

                    def reset_model():
                        model = Transformer(
                            src_vocab_size,
                            src_pad_idx,
                            device=device,
                            max_length=300,
                            dropout=0.1
                        ).to(device)
                        optimizer = optim.Adam(model.parameters(), lr=0.001)
                        loss_func = nn.BCEWithLogitsLoss()
                        return model, optimizer, loss_func

                    def return_tensor(var, device):
                        return torch.from_numpy(var).to(device)

                    def reject_prophage(all_pred, weight):
                        all_pred = np.array(all_pred.detach().cpu())
                        all_pred[weight < reject] = 0
                        return all_pred

                    # training with short contigs
                    model, optimizer, loss_func = reset_model()
                    try:
                        pretrained_dict = torch.load(f'{db_dir}/transformer.pth', map_location=device)
                        model.load_state_dict(pretrained_dict)
                    except:
                        print('cannot find pre-trained model')

                    sentence = pkl.load(open(f'{transformer_fn}/sentence.feat', 'rb'))
                    id2contig = pkl.load(open(f'{transformer_fn}/sentence_id2contig.dict', 'rb'))
                    proportion = pkl.load(open(f'{transformer_fn}/sentence_proportion.feat', 'rb'))

                    all_pred = []
                    all_score = []
                    with torch.no_grad():
                        _ = model.eval()
                        for idx in range(0, len(sentence), 500):
                            try:
                                batch_x = sentence[idx: idx + 500]
                                weight = proportion[idx: idx + 500]
                            except:
                                batch_x = sentence[idx:]
                                weight = proportion[idx:]
                            batch_x = return_tensor(batch_x, device).long()
                            logit = model(batch_x)
                            logit = torch.sigmoid(logit.squeeze(1))
                            logit = reject_prophage(logit, weight)
                            pred = ['phage' if item > 0.5 else 'non-phage' for item in logit]
                            all_pred += pred
                            all_score += [float('{:.3f}'.format(i)) for i in logit]

                    pred_csv = pd.DataFrame({"Contig": id2contig.values(), "Pred": all_pred, "Score": all_score})

                    if os.path.exists(out):
                        os.remove(out)
                        pred_csv.to_csv(out, index=False)
                    else:
                        pred_csv.to_csv(out, index=False)

                    self.textBrowser.setText('Finished!!!'+'\n'+'example_prediction.csv is your result!!!')
        except:
            QMessageBox.critical(self, "error", "Check fasta file format!")


    def table_read(self):
        try:
            global out_tmp
            out_p = os.path.dirname(out)
            out_tmp = out_p + '/example_prediction_tmp.csv'

            with open(out_tmp, 'w') as w:
                f = open(out)
                count = 0
                for line in f:
                    if count == 0:
                        print('1')
                    else:
                        w.write(line)
                        print(line)
                    count = count + 1
            w.close()

            f = open(out_tmp)
            count = 0
            for line in f:
                count = count + 1

            nrows = int(count)
            print(nrows)
            ncols = 3
            self.tableWidget.setRowCount(nrows)  # 设置行数
            self.tableWidget.setColumnCount(ncols)

            f = open(out_tmp)
            row_num = 0
            for line in f:
                print(line)
                li = line.strip().split(',')
                col_num = 0
                for i in li:
                    item = QTableWidgetItem(i)
                    print(item)
                    self.tableWidget.setItem(row_num, col_num, item)
                    print(row_num,col_num)
                    col_num = col_num + 1
                row_num = row_num + 1

        except:
            QMessageBox.critical(self, "error", "Please run program first!!!")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    # Clustal = QtWidgets.QWidget()
    WT = winTest()
    ui = PhaMer_Form()
    ui.setupUi(WT)
    WT.show()
    sys.exit(app.exec_())
