# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'IQtree.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys,os
import time
from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from Bio import SeqIO
import psutil


class WorkThread(QThread):
    # 自定义信号对象
    trigger = pyqtSignal(str)

    def __int__(self):
        # 初始化函数
        super(WorkThread, self).__init__()

    def run(self):
        def check_process_running(process_name):  # 检查进程是否运行
            for process in psutil.process_iter(['name']):
                if process.info['name'] == process_name:
                    return True
            return False

        if type == 'A':
            os.popen(r".\tools\iqtree\bin\iqtree.exe -s %s -pre %s -redo -m MFP -b %s"
                     % (fasta, out, bootstrap))
        elif type == 'B':
            os.popen(r".\tools\iqtree\bin\iqtree.exe -s %s -pre %s -redo -m MF -b %s"
                     % (fasta, out, bootstrap))
        elif type == 'C':
            os.popen(r".\tools\iqtree\bin\iqtree.exe -s %s -pre %s -redo -m TIM2+I+G -b %s"
                     % (fasta, out, bootstrap))
        elif type == 'D':
            os.popen(r".\tools\iqtree\bin\iqtree.exe -s %s -pre %s -redo"
                     % (fasta, out))

        process_name = 'iqtree.exe'
        time.sleep(5)
        while True:  # 判断 iqtree.exe 是否运行完成
            if check_process_running(process_name):
                print(f"The process {process_name} is running.")
                time.sleep(30)
                continue
            else:
                print(f"The process {process_name} is not running.")
                break

        self.trigger.emit('Finished!!!')

class IQtree_Form(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.work = WorkThread()

    def setupUi(self, Clustal):
        Clustal.setObjectName("Clustal")
        Clustal.resize(702, 445)
        Clustal.setStyleSheet("background-image: url(./logo/backgroundpage.png)")
        self.label = QtWidgets.QLabel(Clustal)
        self.label.setGeometry(QtCore.QRect(290, 20, 101, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Clustal)
        self.label_2.setGeometry(QtCore.QRect(40, 80, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_2.setGeometry(QtCore.QRect(40, 120, 221, 31))
        self.textBrowser_2.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.label_3 = QtWidgets.QLabel(Clustal)
        self.label_3.setGeometry(QtCore.QRect(40, 210, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.textBrowser_3 = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser_3.setGeometry(QtCore.QRect(40, 250, 221, 31))
        self.textBrowser_3.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.pushButton_2 = QtWidgets.QPushButton(Clustal)
        self.pushButton_2.setGeometry(QtCore.QRect(300, 120, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Clustal)
        self.pushButton_3.setGeometry(QtCore.QRect(300, 250, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.textBrowser = QtWidgets.QTextBrowser(Clustal)
        self.textBrowser.setGeometry(QtCore.QRect(450, 250, 221, 101))
        self.textBrowser.setStyleSheet("background-image: url(./logo/white.png)")
        self.textBrowser.setObjectName("textBrowser")
        self.label_4 = QtWidgets.QLabel(Clustal)
        self.label_4.setGeometry(QtCore.QRect(480, 210, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(19)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(Clustal)
        self.pushButton.setGeometry(QtCore.QRect(590, 380, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-image: url(./logo/white.png)")
        self.pushButton.setObjectName("pushButton")
        self.label_5 = QtWidgets.QLabel(Clustal)
        self.label_5.setGeometry(QtCore.QRect(450, 80, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.radioButton = QtWidgets.QRadioButton(Clustal)
        self.radioButton.setGeometry(QtCore.QRect(40, 390, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton.setFont(font)
        self.radioButton.setStyleSheet("background-image: url(./logo/white.png)")
        self.radioButton.setObjectName("radioButton")
        self.label_6 = QtWidgets.QLabel(Clustal)
        self.label_6.setGeometry(QtCore.QRect(40, 330, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.radioButton_2 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_2.setGeometry(QtCore.QRect(220, 390, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setStyleSheet("background-image: url(./logo/white.png)")
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_3.setGeometry(QtCore.QRect(130, 390, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setStyleSheet("background-image: url(./logo/white.png)")
        self.radioButton_3.setObjectName("radioButton_3")
        self.textEdit = QtWidgets.QTextEdit(Clustal)
        self.textEdit.setGeometry(QtCore.QRect(450, 120, 221, 31))
        self.textEdit.setStyleSheet("background-image: url(./logo/white.png)")
        self.textEdit.setObjectName("textEdit")
        self.radioButton_4 = QtWidgets.QRadioButton(Clustal)
        self.radioButton_4.setGeometry(QtCore.QRect(360, 390, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setStyleSheet("background-image: url(./logo/white.png)")
        self.radioButton_4.setObjectName("radioButton_4")
        self.label.raise_()
        self.label_2.raise_()
        self.textBrowser_2.raise_()
        self.label_3.raise_()
        self.textBrowser_3.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        self.textBrowser.raise_()
        self.label_4.raise_()
        self.pushButton.raise_()
        self.label_5.raise_()
        self.radioButton.raise_()
        self.label_6.raise_()
        self.textEdit.raise_()
        self.radioButton_3.raise_()
        self.radioButton_2.raise_()
        self.radioButton_4.raise_()

        self.retranslateUi(Clustal)
        QtCore.QMetaObject.connectSlotsByName(Clustal)

        # button action
        self.pushButton.clicked.connect(self.build_tree)
        self.pushButton_2.clicked.connect(self.read_file1)
        self.pushButton_3.clicked.connect(self.read_file2)

        self.textEdit.setPlaceholderText(" Bootstap: 1000")
        self.radioButton.setChecked(True)

    def retranslateUi(self, Clustal):
        _translate = QtCore.QCoreApplication.translate
        Clustal.setWindowTitle(_translate("Clustal", "IQtree"))
        self.label.setText(_translate("Clustal", "IQtree"))
        self.label_2.setText(_translate("Clustal", "Input fasta file"))
        self.label_3.setText(_translate("Clustal", "Output fasta file"))
        self.pushButton_2.setText(_translate("Clustal", "Choose"))
        self.pushButton_3.setText(_translate("Clustal", "Choose"))
        self.label_4.setText(_translate("Clustal", "Status"))
        self.pushButton.setText(_translate("Clustal", "Run"))
        self.label_5.setText(_translate("Clustal", "Bootstroop value"))
        self.radioButton.setText(_translate("Clustal", "MFP"))
        self.label_6.setText(_translate("Clustal", "Substitution models"))
        self.radioButton_2.setText(_translate("Clustal", "TIM2+I+G"))
        self.radioButton_3.setText(_translate("Clustal", "MF"))
        self.radioButton_4.setText(_translate("Clustal", "Simple"))

    def read_file1(self):
        openfile_name = QtWidgets.QFileDialog.getOpenFileName(self, 'choose file', '')[0]
        print(openfile_name)
        self.textBrowser_2.setText(openfile_name)

    def read_file2(self):
        openfile_name = QtWidgets.QFileDialog.getSaveFileName(self, "choose file", "./")[0]
        print(openfile_name)
        self.textBrowser_3.setText(openfile_name)

    def finished(self, str):
        self.textBrowser.setText(str)

    def build_tree(self):
        try:
            global fasta, out, path, bootstrap, type
            fasta = self.textBrowser_2.toPlainText()
            out = self.textBrowser_3.toPlainText()
            path = os.path.dirname(out)

            try:
                bootstrap = self.textEdit.toPlainText()
                if isinstance(bootstrap, int) == True:
                    bootstrap = bootstrap
                else:
                    QMessageBox.critical(self, "error", "Bootstrap value error!")
            except:
                bootstrap = 1000

            if 0 in [len(fasta), len(out)]:
                QMessageBox.warning(self, "warning", "Please add correct file path!", QMessageBox.Cancel)
            else:
                self.textBrowser.setText('Running! please wait')
                QApplication.processEvents()  # 逐条打印状态

                if self.radioButton.isChecked():
                    type = 'A'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_2.isChecked():
                    type = 'B'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_3.isChecked():
                    type = 'C'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                elif self.radioButton_4.isChecked():
                    type = 'D'
                    # 启动线程, 运行 run 函数
                    self.work.start()
                    # 传送信号, 接受 run 函数执行完毕后的信号
                    self.work.trigger.connect(self.finished)

                else:
                    QMessageBox.critical(self, "error", "Please choose Substitution model!")

        except:
            QMessageBox.critical(self, "error", "Check fasta file format!")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Clustal = QtWidgets.QWidget()
    ui = IQtree_Form()
    ui.setupUi(Clustal)
    Clustal.show()
    sys.exit(app.exec_())
